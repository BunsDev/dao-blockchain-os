{
  "address": "0xfd84Ca3c08A808c1a41585e630393D6B5c421336",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__semver",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest[]",
          "name": "reqs",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "executeBatch",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest[]",
          "name": "reqs",
          "type": "tuple[]"
        }
      ],
      "name": "executeBatch",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "executeSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "executeSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct CallForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb28092090f1dda2e88ce11ff344f9465d03a7d097878e622b7e67b7e25ce7e3f",
  "receipt": {
    "to": null,
    "from": "0xA0768D6478977443cA62A10660a95b76b01AcA8d",
    "contractAddress": "0xfd84Ca3c08A808c1a41585e630393D6B5c421336",
    "transactionIndex": 59,
    "gasUsed": "1235456",
    "logsBloom": "0x
    "blockHash": "0x96429c22b045dabdad7658211b8464be75dc21d9f5e8dd1e7e569256e11459c7",
    "transactionHash": "0xb28092090f1dda2e88ce11ff344f9465d03a7d097878e622b7e67b7e25ce7e3f",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 34431796,
        "transactionHash": "0xb28092090f1dda2e88ce11ff344f9465d03a7d097878e622b7e67b7e25ce7e3f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a0768d6478977443ca62a10660a95b76b01aca8d",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002d02b7373adc800000000000000000000000000000000000000000000000000fea6e99c77b22c00000000000000000000000000000000000000000000000fa86cb751f4cc3384e0000000000000000000000000000000000000000000000000fbd6be2904046400000000000000000000000000000000000000000000000fa86f877d683fe14ce0",
        "logIndex": 281,
        "blockHash": "0x96429c22b045dabdad7658211b8464be75dc21d9f5e8dd1e7e569256e11459c7"
      }
    ],
    "blockNumber": 34431796,
    "cumulativeGasUsed": "13669856",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Superdao",
    "v2.0.22"
  ],
  "numDeployments": 2,
  "solcInputHash": "d18c1f43a480045af9e1d361f9915933",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__semver\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest[]\",\"name\":\"reqs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest[]\",\"name\":\"reqs\",\"type\":\"tuple[]\"}],\"name\":\"executeBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"executeSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CallForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SuperdaoTeam\",\"details\":\"Call forwarded performs proxying of requests for OS applications and allows them to be executed in patches. In OS applications, the _msgSender() will be the original address calling the CallForwarder, and not the proxying contract itself.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for `execute`, as defined by {EIP712}. See https://eips.ethereum.org/EIPS/eip-712\"},\"executeBatch((address,address,uint256,uint256,bytes)[],bytes[])\":{\"details\":\"Also, the executeSingle method can be executed in batches.\"},\"executeSingle((address,address,uint256,uint256,bytes),bytes)\":{\"details\":\"Requests are sent using the executeSingle methods, which have an overload. The main difference between function executeSingle(ForwardRequest calldata req, bytes calldata signature) and function executeSingle(ForwardRequest calldata req) is that if a signature was transmitted, the sender address will be formed from the signature, otherwise from msg.sender.\"},\"getNonce(address)\":{\"details\":\"Retrieves the on-chain tracked nonce of an EOA making the request.\"}},\"title\":\"CallForwarder.sol\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CallForwarder/CallForwarder.sol\":\"CallForwarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"contracts/CallForwarder/CallForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../libraries/Exceptions.sol\\\";\\nimport {__with_semver} from \\\"../libraries/Semver.sol\\\";\\n\\n/**\\n * @title CallForwarder.sol\\n * @author SuperdaoTeam\\n * @dev Call forwarded performs proxying of requests for OS applications and allows them\\n * to be executed in patches. In OS applications, the _msgSender() will be the original address\\n * calling the CallForwarder, and not the proxying contract itself.\\n */\\n\\ncontract CallForwarder is EIP712, __with_semver(uint8(1), uint8(1), uint8(0)) {\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @dev The request in the contract has the following structure.\\n     *\\n     */\\n    struct ForwardRequest {\\n        address from; // @param Externally-owned account (EOA) making the request.\\n        address to; // @param Destination address, normally a smart contract.\\n        uint256 value; // @param Amount of ether to transfer to the destination.\\n        uint256 nonce; // @param  On-chain tracked nonce of a transaction.\\n        bytes data; // @param (Call)data to be sent to the destination.\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    event MetaTransactionExecuted(address indexed from, address indexed to, bytes indexed data);\\n\\n    constructor(string memory name, string memory version) EIP712(name, version) {}\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `execute`,\\n     * as defined by {EIP712}.\\n     * See https://eips.ethereum.org/EIPS/eip-712\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev Retrieves the on-chain tracked nonce of an EOA making the request.\\n     *\\n     */\\n    function getNonce(address from) external view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function getSigner(ForwardRequest calldata req, bytes calldata signature) public view returns (address signer) {\\n        signer = getMessageHash(req).recover(signature);\\n    }\\n\\n    function getMessageHash(ForwardRequest calldata req) public view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.nonce, keccak256(req.data)))\\n            );\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = getSigner(req, signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    /**\\n     * @dev Requests are sent using the executeSingle methods, which have an overload.\\n     * The main difference between\\n     * function executeSingle(ForwardRequest calldata req, bytes calldata signature) and\\n     * function executeSingle(ForwardRequest calldata req) is that if a signature was transmitted,\\n     * the sender address will be formed from the signature, otherwise from msg.sender.\\n     */\\n\\n    function executeSingle(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bytes memory returnData)\\n    {\\n        require(verify(req, signature), \\\"CallForwarder: signature does not match request\\\");\\n        _nonces[req.from]++;\\n        returnData = _execute(req);\\n        _refund();\\n\\n        emit MetaTransactionExecuted(req.from, req.to, req.data);\\n    }\\n\\n    function executeSingle(ForwardRequest calldata req) public payable returns (bytes memory returnData) {\\n        require(req.from == msg.sender, \\\"AwlForwarder: msg.sender must be equals with req.from\\\");\\n        returnData = _execute(req);\\n        _refund();\\n    }\\n\\n    /**\\n     * @dev Also, the executeSingle method can be executed in batches.\\n     *\\n     */\\n    function executeBatch(ForwardRequest[] calldata reqs, bytes[] calldata signatures)\\n        external\\n        payable\\n        returns (bytes[] memory)\\n    {\\n        require(\\n            reqs.length == signatures.length,\\n            \\\"length of forward requests must be similar with length of signatures\\\"\\n        );\\n        bytes[] memory results = new bytes[](reqs.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            require(verify(reqs[i], signatures[i]), \\\"CallForwarder: signature does not match request\\\");\\n            results[i] = _execute(reqs[i]);\\n        }\\n        _refund();\\n        return results;\\n    }\\n\\n    function executeBatch(ForwardRequest[] calldata reqs) external payable returns (bytes[] memory) {\\n        bytes[] memory results = new bytes[](reqs.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            results[i] = _execute(reqs[i]);\\n        }\\n        _refund();\\n        return results;\\n    }\\n\\n    function _refund() private {\\n        uint256 balance = address(this).balance;\\n        if (balance != 0) {\\n            Address.sendValue(payable(msg.sender), balance);\\n        }\\n    }\\n\\n    function _execute(ForwardRequest calldata req) private returns (bytes memory returnData) {\\n        returnData = Address.functionCallWithValue(\\n            req.to,\\n            abi.encodePacked(req.data, req.from),\\n            req.value,\\n            Exceptions.INVALID_AUTHORIZATION_ERROR\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x72f7b01ab48d65191acfcc135fa1663876b3f55b88b09f2a69d41ef7b3f0b073\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Exceptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nlibrary Exceptions {\\n    string constant INVALID_INITIALIZATION_ERROR = \\\"INITIALIZATION\\\";\\n    string constant INVALID_AUTHORIZATION_ERROR = \\\"AUTHORIZATION\\\";\\n    string constant INVARIANT_ERROR = \\\"INVARIANT\\\";\\n    string constant VALIDATION_ERROR = \\\"VALIDATION\\\";\\n    string constant UNAVAILABLE_ERROR = \\\"UNAVAILABLE\\\";\\n    string constant NOT_ACTIVE_ERROR = \\\"NOT_ACTIVE\\\";\\n    string constant NO_TREASURY_ADDRESS = \\\"NO_TREASURY_ADDRESS\\\";\\n    string constant APP_WAS_INITED_ERROR = \\\"APP_WAS_INITED\\\";\\n    string constant ILLEGAL_ADDRESS = \\\"ADDRESS_ASSOCIATES_WITH_APP\\\";\\n    string constant BUY_LIMIT_ERROR = \\\"BUY_LIMIT_ERROR\\\";\\n    string constant NULL_TOKEN_ADDRESS = \\\"NULL_TOKEN_ADDRESS\\\";\\n    string constant UNSUPPORTED_TOKEN_ADDRESS = \\\"UNSUPPORTED_TOKEN_ADDRESS\\\";\\n    string constant NOT_FOUND_PRICE_FOR_TIER = \\\"NOT_FOUND_PRICE_FOR_TIER\\\";\\n    string constant INSUFFICIENT_AMOUNTS_OF_FUNDS = \\\"INSUFFICIENT_AMOUNTS_OF_FUNDS\\\";\\n    string constant INSUFFICIENT_ALLOWANCE = \\\"INSUFFICIENT_ALLOWANCE\\\";\\n    string constant BASIC_TOKEN_ADDRESS_NOT_SET = \\\"BASIC_TOKEN_ADDRESS_NOT_SET\\\";\\n    string constant LIQUIDITY_POOL_NOT_FOUND = \\\"LIQUIDITY_POOL_NOT_FOUND\\\";\\n    string constant ADDRESS_IS_NOT_CONTRACT = \\\"ADDRESS_IS_NOT_CONTRACT\\\";\\n}\\n\",\"keccak256\":\"0x3626c949e39d0d2f528fbaf077cf270f1067924c857722362dfe7ac3d6de4fa2\",\"license\":\"MIT\"},\"contracts/libraries/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nabstract contract __with_semver {\\n    uint8 private immutable __semver_major;\\n    uint8 private immutable __semver_minor;\\n    uint8 private immutable __semver_patch;\\n\\n    constructor(\\n        uint8 _major,\\n        uint8 _minor,\\n        uint8 _patch\\n    ) {\\n        __semver_major = _major;\\n        __semver_minor = _minor;\\n        __semver_patch = _patch;\\n    }\\n\\n    function __semver() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"v\\\",\\n                    uint8(0x30) + __semver_major,\\n                    \\\".\\\",\\n                    uint8(0x30) + __semver_minor,\\n                    \\\".\\\",\\n                    uint8(0x30) + __semver_patch\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x393fd2cd95660e9c0539e5fe740cd83167522ba53402b785a77684dd3892eb03\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b50604051620017c0380380620017c08339810160408190526200003591620001a9565b815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c0948501909152815191909501209052919091526101205260016101408190526101605260006101805262000213565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200010457600080fd5b81516001600160401b0380821115620001215762000121620000dc565b604051601f8301601f19908116603f011681019082821181831017156200014c576200014c620000dc565b816040528381526020925086838588010111156200016957600080fd5b600091505b838210156200018d57858201830151818301840152908201906200016e565b838211156200019f5760008385830101525b9695505050505050565b60008060408385031215620001bd57600080fd5b82516001600160401b0380821115620001d557600080fd5b620001e386838701620000f2565b93506020850151915080821115620001fa57600080fd5b506200020985828601620000f2565b9150509250929050565b60805160a05160c05160e051610100516101205161014051610160516101805161153c62000284600039600061063a0152600061060f015260006105e40152600061099f015260006109ee015260006109c9015260006109220152600061094c01526000610976015261153c6000f3fe6080604052600436106100915760003560e01c806362c8aa4b1161005957806362c8aa4b146101685780637effd8a71461017b5780639863009f146101905780639d02dd5f146101b0578063d515e727146101e857600080fd5b806301918170146100965780632d0335ab146100bf5780633644e515146101035780634d5640ac146101185780635b4dbfcc14610138575b600080fd5b6100a96100a43660046110cc565b6101fb565b6040516100b69190611194565b60405180910390f35b3480156100cb57600080fd5b506100f56100da3660046111f6565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100b6565b34801561010f57600080fd5b506100f56103b7565b61012b610126366004611237565b6103c6565b6040516100b6919061126c565b34801561014457600080fd5b5061015861015336600461127f565b610462565b60405190151581526020016100b6565b61012b61017636600461127f565b6104dd565b34801561018757600080fd5b5061012b6105dd565b34801561019c57600080fd5b506100f56101ab366004611237565b6106bf565b3480156101bc57600080fd5b506101d06101cb36600461127f565b610787565b6040516001600160a01b0390911681526020016100b6565b6100a96101f6366004611316565b6107dc565b60608382146102855760405162461bcd60e51b8152602060048201526044602482018190527f6c656e677468206f6620666f7277617264207265717565737473206d75737420908201527f62652073696d696c61722077697468206c656e677468206f66207369676e61746064820152637572657360e01b608482015260a4015b60405180910390fd5b60008467ffffffffffffffff8111156102a0576102a0611358565b6040519080825280602002602001820160405280156102d357816020015b60608152602001906001900390816102be5790505b50905060005b81518110156103a55761032d8787838181106102f7576102f761136e565b90506020028101906103099190611384565b86868481811061031b5761031b61136e565b905060200281019061015391906113a4565b6103495760405162461bcd60e51b815260040161027c906113eb565b61037587878381811061035e5761035e61136e565b90506020028101906103709190611384565b610889565b8282815181106103875761038761136e565b6020026020010181905250808061039d90611450565b9150506102d9565b506103ae610901565b95945050505050565b60006103c1610915565b905090565b6060336103d660208401846111f6565b6001600160a01b03161461044a5760405162461bcd60e51b815260206004820152603560248201527f41776c466f727761726465723a206d73672e73656e646572206d75737420626560448201527420657175616c732077697468207265712e66726f6d60581b606482015260840161027c565b61045382610889565b905061045d610901565b919050565b600080610470858585610787565b9050606085013560008061048760208901896111f6565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156104d257506104bd60208601866111f6565b6001600160a01b0316816001600160a01b0316145b9150505b9392505050565b60606104ea848484610462565b6105065760405162461bcd60e51b815260040161027c906113eb565b60008061051660208701876111f6565b6001600160a01b031681526020810191909152604001600090812080549161053d83611450565b919050555061054b84610889565b9050610555610901565b61056260808501856113a4565b60405161057092919061146b565b604051809103902084602001602081019061058b91906111f6565b6001600160a01b03166105a160208701876111f6565b6001600160a01b03167f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b60405160405180910390a49392505050565b606061060a7f0000000000000000000000000000000000000000000000000000000000000000603061147b565b6106357f0000000000000000000000000000000000000000000000000000000000000000603061147b565b6106607f0000000000000000000000000000000000000000000000000000000000000000603061147b565b604051603b60f91b60208201526001600160f81b031960f894851b81166021830152601760f91b6022830181905293851b811660238301526024820193909352921b166025820152602601604051602081830303815290604052905090565b60006107817f37f69988ed101a80359fd1bf023dce4ccbafcaf14b772646dec9ad4f0d6bc1e26106f260208501856111f6565b61070260408601602087016111f6565b6040860135606087013561071960808901896113a4565b60405161072792919061146b565b6040805191829003822060208301979097526001600160a01b0395861690820152939092166060840152608083015260a082015260c081019190915260e00160405160208183030381529060405280519060200120610a3c565b92915050565b60006107d483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92508891506106bf9050565b90610a8a565b949350505050565b606060008267ffffffffffffffff8111156107f9576107f9611358565b60405190808252806020026020018201604052801561082c57816020015b60608152602001906001900390816108175790505b50905060005b81518110156108805761085085858381811061035e5761035e61136e565b8282815181106108625761086261136e565b6020026020010181905250808061087890611450565b915050610832565b506104d6610901565b606061078161089e60408401602085016111f6565b6108ab60808501856113a4565b6108b860208701876111f6565b6040516020016108ca939291906114a0565b60408051601f198184030181528282018252600d83526c20aaaa2427a924ad20aa24a7a760991b6020840152919086013590610aae565b478015610912576109123382610bdf565b50565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561096e57507f000000000000000000000000000000000000000000000000000000000000000046145b1561099857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000610781610a49610915565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610a998585610cfd565b91509150610aa681610d6d565b509392505050565b606082471015610b0f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027c565b6001600160a01b0385163b610b665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027c565b600080866001600160a01b03168587604051610b8291906114c6565b60006040518083038185875af1925050503d8060008114610bbf576040519150601f19603f3d011682016040523d82523d6000602084013e610bc4565b606091505b5091509150610bd4828286610f28565b979650505050505050565b80471015610c2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161027c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c7c576040519150601f19603f3d011682016040523d82523d6000602084013e610c81565b606091505b5050905080610cf85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161027c565b505050565b600080825160411415610d345760208301516040840151606085015160001a610d2887828585610f61565b94509450505050610d66565b825160401415610d5e5760208301516040840151610d5386838361104e565b935093505050610d66565b506000905060025b9250929050565b6000816004811115610d8157610d816114d8565b1415610d8a5750565b6001816004811115610d9e57610d9e6114d8565b1415610dec5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161027c565b6002816004811115610e0057610e006114d8565b1415610e4e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161027c565b6003816004811115610e6257610e626114d8565b1415610ebb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161027c565b6004816004811115610ecf57610ecf6114d8565b14156109125760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161027c565b60608315610f375750816104d6565b825115610f475782518084602001fd5b8160405162461bcd60e51b815260040161027c919061126c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f985750600090506003611045565b8460ff16601b14158015610fb057508460ff16601c14155b15610fc15750600090506004611045565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611015573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661103e57600060019250925050611045565b9150600090505b94509492505050565b6000806001600160ff1b0383168161106b60ff86901c601b6114ee565b905061107987828885610f61565b935093505050935093915050565b60008083601f84011261109957600080fd5b50813567ffffffffffffffff8111156110b157600080fd5b6020830191508360208260051b8501011115610d6657600080fd5b600080600080604085870312156110e257600080fd5b843567ffffffffffffffff808211156110fa57600080fd5b61110688838901611087565b9096509450602087013591508082111561111f57600080fd5b5061112c87828801611087565b95989497509550505050565b60005b8381101561115357818101518382015260200161113b565b83811115611162576000848401525b50505050565b60008151808452611180816020860160208601611138565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111e957603f198886030184526111d7858351611168565b945092850192908501906001016111bb565b5092979650505050505050565b60006020828403121561120857600080fd5b81356001600160a01b03811681146104d657600080fd5b600060a0828403121561123157600080fd5b50919050565b60006020828403121561124957600080fd5b813567ffffffffffffffff81111561126057600080fd5b6107d48482850161121f565b6020815260006104d66020830184611168565b60008060006040848603121561129457600080fd5b833567ffffffffffffffff808211156112ac57600080fd5b6112b88783880161121f565b945060208601359150808211156112ce57600080fd5b818601915086601f8301126112e257600080fd5b8135818111156112f157600080fd5b87602082850101111561130357600080fd5b6020830194508093505050509250925092565b6000806020838503121561132957600080fd5b823567ffffffffffffffff81111561134057600080fd5b61134c85828601611087565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235609e1983360301811261139a57600080fd5b9190910192915050565b6000808335601e198436030181126113bb57600080fd5b83018035915067ffffffffffffffff8211156113d657600080fd5b602001915036819003821315610d6657600080fd5b6020808252602f908201527f43616c6c466f727761726465723a207369676e617475726520646f6573206e6f60408201526e1d081b585d18da081c995c5d595cdd608a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156114645761146461143a565b5060010190565b8183823760009101908152919050565b600060ff821660ff84168060ff038211156114985761149861143a565b019392505050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b6000825161139a818460208701611138565b634e487b7160e01b600052602160045260246000fd5b600082198211156115015761150161143a565b50019056fea26469706673582212207b801ad00c798b325db8988e8e297c95e75db64abda470600082c57dcf2d099c64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c806362c8aa4b1161005957806362c8aa4b146101685780637effd8a71461017b5780639863009f146101905780639d02dd5f146101b0578063d515e727146101e857600080fd5b806301918170146100965780632d0335ab146100bf5780633644e515146101035780634d5640ac146101185780635b4dbfcc14610138575b600080fd5b6100a96100a43660046110cc565b6101fb565b6040516100b69190611194565b60405180910390f35b3480156100cb57600080fd5b506100f56100da3660046111f6565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100b6565b34801561010f57600080fd5b506100f56103b7565b61012b610126366004611237565b6103c6565b6040516100b6919061126c565b34801561014457600080fd5b5061015861015336600461127f565b610462565b60405190151581526020016100b6565b61012b61017636600461127f565b6104dd565b34801561018757600080fd5b5061012b6105dd565b34801561019c57600080fd5b506100f56101ab366004611237565b6106bf565b3480156101bc57600080fd5b506101d06101cb36600461127f565b610787565b6040516001600160a01b0390911681526020016100b6565b6100a96101f6366004611316565b6107dc565b60608382146102855760405162461bcd60e51b8152602060048201526044602482018190527f6c656e677468206f6620666f7277617264207265717565737473206d75737420908201527f62652073696d696c61722077697468206c656e677468206f66207369676e61746064820152637572657360e01b608482015260a4015b60405180910390fd5b60008467ffffffffffffffff8111156102a0576102a0611358565b6040519080825280602002602001820160405280156102d357816020015b60608152602001906001900390816102be5790505b50905060005b81518110156103a55761032d8787838181106102f7576102f761136e565b90506020028101906103099190611384565b86868481811061031b5761031b61136e565b905060200281019061015391906113a4565b6103495760405162461bcd60e51b815260040161027c906113eb565b61037587878381811061035e5761035e61136e565b90506020028101906103709190611384565b610889565b8282815181106103875761038761136e565b6020026020010181905250808061039d90611450565b9150506102d9565b506103ae610901565b95945050505050565b60006103c1610915565b905090565b6060336103d660208401846111f6565b6001600160a01b03161461044a5760405162461bcd60e51b815260206004820152603560248201527f41776c466f727761726465723a206d73672e73656e646572206d75737420626560448201527420657175616c732077697468207265712e66726f6d60581b606482015260840161027c565b61045382610889565b905061045d610901565b919050565b600080610470858585610787565b9050606085013560008061048760208901896111f6565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156104d257506104bd60208601866111f6565b6001600160a01b0316816001600160a01b0316145b9150505b9392505050565b60606104ea848484610462565b6105065760405162461bcd60e51b815260040161027c906113eb565b60008061051660208701876111f6565b6001600160a01b031681526020810191909152604001600090812080549161053d83611450565b919050555061054b84610889565b9050610555610901565b61056260808501856113a4565b60405161057092919061146b565b604051809103902084602001602081019061058b91906111f6565b6001600160a01b03166105a160208701876111f6565b6001600160a01b03167f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b60405160405180910390a49392505050565b606061060a7f0000000000000000000000000000000000000000000000000000000000000000603061147b565b6106357f0000000000000000000000000000000000000000000000000000000000000000603061147b565b6106607f0000000000000000000000000000000000000000000000000000000000000000603061147b565b604051603b60f91b60208201526001600160f81b031960f894851b81166021830152601760f91b6022830181905293851b811660238301526024820193909352921b166025820152602601604051602081830303815290604052905090565b60006107817f37f69988ed101a80359fd1bf023dce4ccbafcaf14b772646dec9ad4f0d6bc1e26106f260208501856111f6565b61070260408601602087016111f6565b6040860135606087013561071960808901896113a4565b60405161072792919061146b565b6040805191829003822060208301979097526001600160a01b0395861690820152939092166060840152608083015260a082015260c081019190915260e00160405160208183030381529060405280519060200120610a3c565b92915050565b60006107d483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92508891506106bf9050565b90610a8a565b949350505050565b606060008267ffffffffffffffff8111156107f9576107f9611358565b60405190808252806020026020018201604052801561082c57816020015b60608152602001906001900390816108175790505b50905060005b81518110156108805761085085858381811061035e5761035e61136e565b8282815181106108625761086261136e565b6020026020010181905250808061087890611450565b915050610832565b506104d6610901565b606061078161089e60408401602085016111f6565b6108ab60808501856113a4565b6108b860208701876111f6565b6040516020016108ca939291906114a0565b60408051601f198184030181528282018252600d83526c20aaaa2427a924ad20aa24a7a760991b6020840152919086013590610aae565b478015610912576109123382610bdf565b50565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561096e57507f000000000000000000000000000000000000000000000000000000000000000046145b1561099857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000610781610a49610915565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610a998585610cfd565b91509150610aa681610d6d565b509392505050565b606082471015610b0f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027c565b6001600160a01b0385163b610b665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027c565b600080866001600160a01b03168587604051610b8291906114c6565b60006040518083038185875af1925050503d8060008114610bbf576040519150601f19603f3d011682016040523d82523d6000602084013e610bc4565b606091505b5091509150610bd4828286610f28565b979650505050505050565b80471015610c2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161027c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c7c576040519150601f19603f3d011682016040523d82523d6000602084013e610c81565b606091505b5050905080610cf85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161027c565b505050565b600080825160411415610d345760208301516040840151606085015160001a610d2887828585610f61565b94509450505050610d66565b825160401415610d5e5760208301516040840151610d5386838361104e565b935093505050610d66565b506000905060025b9250929050565b6000816004811115610d8157610d816114d8565b1415610d8a5750565b6001816004811115610d9e57610d9e6114d8565b1415610dec5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161027c565b6002816004811115610e0057610e006114d8565b1415610e4e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161027c565b6003816004811115610e6257610e626114d8565b1415610ebb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161027c565b6004816004811115610ecf57610ecf6114d8565b14156109125760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161027c565b60608315610f375750816104d6565b825115610f475782518084602001fd5b8160405162461bcd60e51b815260040161027c919061126c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f985750600090506003611045565b8460ff16601b14158015610fb057508460ff16601c14155b15610fc15750600090506004611045565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611015573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661103e57600060019250925050611045565b9150600090505b94509492505050565b6000806001600160ff1b0383168161106b60ff86901c601b6114ee565b905061107987828885610f61565b935093505050935093915050565b60008083601f84011261109957600080fd5b50813567ffffffffffffffff8111156110b157600080fd5b6020830191508360208260051b8501011115610d6657600080fd5b600080600080604085870312156110e257600080fd5b843567ffffffffffffffff808211156110fa57600080fd5b61110688838901611087565b9096509450602087013591508082111561111f57600080fd5b5061112c87828801611087565b95989497509550505050565b60005b8381101561115357818101518382015260200161113b565b83811115611162576000848401525b50505050565b60008151808452611180816020860160208601611138565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111e957603f198886030184526111d7858351611168565b945092850192908501906001016111bb565b5092979650505050505050565b60006020828403121561120857600080fd5b81356001600160a01b03811681146104d657600080fd5b600060a0828403121561123157600080fd5b50919050565b60006020828403121561124957600080fd5b813567ffffffffffffffff81111561126057600080fd5b6107d48482850161121f565b6020815260006104d66020830184611168565b60008060006040848603121561129457600080fd5b833567ffffffffffffffff808211156112ac57600080fd5b6112b88783880161121f565b945060208601359150808211156112ce57600080fd5b818601915086601f8301126112e257600080fd5b8135818111156112f157600080fd5b87602082850101111561130357600080fd5b6020830194508093505050509250925092565b6000806020838503121561132957600080fd5b823567ffffffffffffffff81111561134057600080fd5b61134c85828601611087565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235609e1983360301811261139a57600080fd5b9190910192915050565b6000808335601e198436030181126113bb57600080fd5b83018035915067ffffffffffffffff8211156113d657600080fd5b602001915036819003821315610d6657600080fd5b6020808252602f908201527f43616c6c466f727761726465723a207369676e617475726520646f6573206e6f60408201526e1d081b585d18da081c995c5d595cdd608a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156114645761146461143a565b5060010190565b8183823760009101908152919050565b600060ff821660ff84168060ff038211156114985761149861143a565b019392505050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b6000825161139a818460208701611138565b634e487b7160e01b600052602160045260246000fd5b600082198211156115015761150161143a565b50019056fea26469706673582212207b801ad00c798b325db8988e8e297c95e75db64abda470600082c57dcf2d099c64736f6c634300080c0033",
  "devdoc": {
    "author": "SuperdaoTeam",
    "details": "Call forwarded performs proxying of requests for OS applications and allows them to be executed in patches. In OS applications, the _msgSender() will be the original address calling the CallForwarder, and not the proxying contract itself.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator used in the encoding of the signature for `execute`, as defined by {EIP712}. See https://eips.ethereum.org/EIPS/eip-712"
      },
      "executeBatch((address,address,uint256,uint256,bytes)[],bytes[])": {
        "details": "Also, the executeSingle method can be executed in batches."
      },
      "executeSingle((address,address,uint256,uint256,bytes),bytes)": {
        "details": "Requests are sent using the executeSingle methods, which have an overload. The main difference between function executeSingle(ForwardRequest calldata req, bytes calldata signature) and function executeSingle(ForwardRequest calldata req) is that if a signature was transmitted, the sender address will be formed from the signature, otherwise from msg.sender."
      },
      "getNonce(address)": {
        "details": "Retrieves the on-chain tracked nonce of an EOA making the request."
      }
    },
    "title": "CallForwarder.sol",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7353,
        "contract": "contracts/CallForwarder/CallForwarder.sol:CallForwarder",
        "label": "_nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}