{
  "address": "0x44AB74EB80Fd5dd59895c16e7398300dB9E96B03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IKernel",
          "name": "kernel",
          "type": "address"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "propKeys",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "propValues",
          "type": "bytes32[]"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeacon",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beaconProxy",
          "type": "address"
        }
      ],
      "name": "ProxyMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "propKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "propValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "attrKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "attrValue",
          "type": "bytes32"
        }
      ],
      "name": "SetAttribute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "SetName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "SetSymbol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "code",
          "type": "address"
        }
      ],
      "name": "Upgrade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLER",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__semver",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "propKey",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "propValue",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "attrKey",
          "type": "string"
        }
      ],
      "name": "getAttribute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "getPropertyValue",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRestrictBurnPolicy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tier",
          "type": "bytes32"
        }
      ],
      "name": "hasRandomMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tier",
          "type": "bytes32"
        }
      ],
      "name": "hasRandomShuffleMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IKernel",
              "name": "kernel",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openseaOwner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Properties.Initialization",
          "name": "init",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "internalType": "contract IKernel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBeacon",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beaconProxy",
          "type": "address"
        }
      ],
      "name": "migrateToBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "tierValue",
          "type": "bytes32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "propKey",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "propValue",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "attrKey",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "attrValue",
          "type": "bytes32"
        }
      ],
      "name": "setAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tierValue",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "artworksCount",
          "type": "uint256"
        }
      ],
      "name": "setRandomMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tierValue",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        }
      ],
      "name": "setRandomShuffleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "burnPolicy",
          "type": "bool"
        }
      ],
      "name": "setRestrictBurnPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setupVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tier",
          "type": "bytes32"
        }
      ],
      "name": "tierExtraArtworksNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appCode",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87a1857944eb133420828a84ef5a6459e1b90ccbcb417482ec536e611b8d151d",
  "receipt": {
    "to": null,
    "from": "0x22bdc4AA7204f59d78d38d82729bE76CA4e6E4Df",
    "contractAddress": "0x44AB74EB80Fd5dd59895c16e7398300dB9E96B03",
    "transactionIndex": 18,
    "gasUsed": "3885794",
    "logsBloom": "0x
    "blockHash": "0x51268d523d3f245dff4cee01bec711cdc76fa2fadb4bd8ffaa38027111f3bb2f",
    "transactionHash": "0x87a1857944eb133420828a84ef5a6459e1b90ccbcb417482ec536e611b8d151d",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 34771211,
        "transactionHash": "0x87a1857944eb133420828a84ef5a6459e1b90ccbcb417482ec536e611b8d151d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000022bdc4aa7204f59d78d38d82729be76ca4e6e4df",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002ca93bacad90d5c000000000000000000000000000000000000000000000003b3211803f400c7bb000000000000000000000000000000000000000000000d3558b28853cf1a2556000000000000000000000000000000000000000000000003b05684492927ba5f000000000000000000000000000000000000000000000d355b7d1c0e99f332b2",
        "logIndex": 62,
        "blockHash": "0x51268d523d3f245dff4cee01bec711cdc76fa2fadb4bd8ffaa38027111f3bb2f"
      }
    ],
    "blockNumber": 34771211,
    "cumulativeGasUsed": "7005943",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x528Ea358b0De7f9CBBe040F4381f5620a029143f"
  ],
  "numDeployments": 8,
  "solcInputHash": "341c9f0e9410711860e07934fbb5f71b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IKernel\",\"name\":\"kernel\",\"type\":\"address\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"propKeys\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"propValues\",\"type\":\"bytes32[]\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeacon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beaconProxy\",\"type\":\"address\"}],\"name\":\"ProxyMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"propKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"propValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attrKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"attrValue\",\"type\":\"bytes32\"}],\"name\":\"SetAttribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"SetName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__semver\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"propKey\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"propValue\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"attrKey\",\"type\":\"string\"}],\"name\":\"getAttribute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPropertyValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestrictBurnPolicy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tier\",\"type\":\"bytes32\"}],\"name\":\"hasRandomMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tier\",\"type\":\"bytes32\"}],\"name\":\"hasRandomShuffleMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IKernel\",\"name\":\"kernel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openseaOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Properties.Initialization\",\"name\":\"init\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"internalType\":\"contract IKernel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beaconProxy\",\"type\":\"address\"}],\"name\":\"migrateToBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tierValue\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"propKey\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"propValue\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"attrKey\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"attrValue\",\"type\":\"bytes32\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tierValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artworksCount\",\"type\":\"uint256\"}],\"name\":\"setRandomMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tierValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"setRandomShuffleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"burnPolicy\",\"type\":\"bool\"}],\"name\":\"setRestrictBurnPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setupVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tier\",\"type\":\"bytes32\"}],\"name\":\"tierExtraArtworksNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appCode\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SuperdaoTeam\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"implementation()\":{\"details\":\"Add appCode for external access\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgrade(address)\":{\"details\":\"Update via appCode\"}},\"title\":\"ERC721Properties\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Create a new role identifier for Admin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/ERC721Properties/ERC721Properties.sol\":\"ERC721Properties\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xa9ee8ba9953f4339e308abde06d64195b81852b5c605cfb738582a03ddf20099\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84690ebda74336bdda266a1c10e4edb5e2488bf2ab018cfc0cf11693b743dff6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/apps/App.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\r\\nimport \\\"../kernel/interfaces/IKernel.sol\\\";\\r\\nimport \\\"../libraries/Exceptions.sol\\\";\\r\\nimport \\\"./UpgradeableApp.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title App\\r\\n * @author SuperdaoTeam\\r\\n * @notice Create apps on Kernel for ERC721 protocol Sale\\r\\n *\\r\\n */\\r\\nabstract contract App is UpgradeableApp, Initializable, ERC2771Context {\\r\\n    IKernel public kernel;\\r\\n    uint8 private _nextRoleId = 0;\\r\\n\\r\\n    uint256[99] private __gap;\\r\\n\\r\\n    /**\\r\\n     * @dev Declare events for kernel and address\\r\\n     *\\r\\n     */\\r\\n    event Init(IKernel kernel);\\r\\n    event Upgrade(address code);\\r\\n    event ProxyMigrated(address newBeacon, address beaconProxy);\\r\\n\\r\\n    /**\\r\\n     * @dev Checks the permission, so the function is executed and otherwise, an exception is thrown.\\r\\n     *\\r\\n     */\\r\\n    modifier requirePermission(uint8 permissionId) {\\r\\n        require(_hasPermission(permissionId), Exceptions.INVALID_AUTHORIZATION_ERROR);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verify Kernel permission, so the function is executed and otherwise, an exception is thrown.\\r\\n     *\\r\\n     */\\r\\n    modifier onlyKernel() {\\r\\n        require(_msgSender() == address(kernel), Exceptions.INVALID_AUTHORIZATION_ERROR);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update via appCode\\r\\n     *\\r\\n     */\\r\\n    function upgrade(address appCode) external onlyKernel {\\r\\n        _getImplementationSlot().value = appCode;\\r\\n\\r\\n        emit Upgrade(appCode);\\r\\n    }\\r\\n\\r\\n    function migrateToBeacon(address newBeacon, address beaconProxy) external onlyKernel {\\r\\n        _getBeaconSlot().value = newBeacon;\\r\\n        _getImplementationSlot().value = beaconProxy;\\r\\n\\r\\n        emit ProxyMigrated(newBeacon, beaconProxy);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add appCode for external access\\r\\n     *\\r\\n     */\\r\\n    function implementation() external view returns (address) {\\r\\n        return _getImplementationSlot().value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize App for Kernel access\\r\\n     *\\r\\n     */\\r\\n    function __App_init(IKernel _kernel) internal onlyInitializing {\\r\\n        kernel = _kernel;\\r\\n\\r\\n        emit Init(kernel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Error-handling via assert toll and checking if role numbers is less than 15\\r\\n     *\\r\\n     */\\r\\n    function _initNextRole() internal returns (uint8) {\\r\\n        require(_nextRoleId < 15, Exceptions.VALIDATION_ERROR);\\r\\n\\r\\n        return _nextRoleId++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if permission is granted and returns via msgSender\\r\\n     *\\r\\n     */\\r\\n    function _hasPermission(uint8 permissionId) internal view returns (bool) {\\r\\n        return kernel.hasPermission(_msgSender(), address(this), permissionId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3aa283b5714a93c2315f8eeb3a819924958b8403995afb70dcb5346a0fa90062\",\"license\":\"UNLICENSED\"},\"contracts/apps/ERC721Properties/ERC721Properties.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"../App.sol\\\";\\r\\nimport \\\"../../libraries/Exceptions.sol\\\";\\r\\nimport \\\"../../libraries/Utils.sol\\\";\\r\\nimport \\\"../../libraries/Semver.sol\\\";\\r\\nimport \\\"../Interfaces/IVRFCoordinatorV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721Properties\\r\\n * @author SuperdaoTeam\\r\\n * @notice Create a new role identifier for Admin\\r\\n */\\r\\ncontract ERC721Properties is ERC721Upgradeable, OwnableUpgradeable, App, __with_semver(uint8(1), uint8(1), uint8(0)) {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    type KeyHash is bytes32;\\r\\n\\r\\n    // @notice Describing components of Initialization stage.\\r\\n    struct Initialization {\\r\\n        IKernel kernel;\\r\\n        address openseaOwner;\\r\\n        string baseURI;\\r\\n        string name;\\r\\n        string symbol;\\r\\n    }\\r\\n\\r\\n    struct Properties {\\r\\n        mapping(KeyHash => bytes32) properties;\\r\\n    }\\r\\n\\r\\n    struct Attributes {\\r\\n        mapping(KeyHash => bytes32) attributes;\\r\\n    }\\r\\n\\r\\n    struct VRFRequest {\\r\\n        address to;\\r\\n        bytes32 tierValue;\\r\\n        uint32 tokenId;\\r\\n    }\\r\\n\\r\\n    // @param Unchangeable controller invariable.\\r\\n    uint8 public immutable CONTROLLER = _initNextRole();\\r\\n\\r\\n    string constant INVALID_TIER_AMOUNT_ERROR = \\\"INVALID_TIER_AMOUNT_ERROR\\\";\\r\\n\\r\\n    string constant PROPERTY_TIER = \\\"TIER\\\";\\r\\n    string constant PROPERTY_ARTWORK_ID = \\\"ARTWORK_ID\\\";\\r\\n\\r\\n    string constant ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM = \\\"TIER_EXTRA_ARTWORKS_NUM\\\";\\r\\n    string constant ATTRIBUTE_TIER_RANDOM_MINT = \\\"TIER_RANDOM_MINT\\\";\\r\\n    string constant ATTRIBUTE_TIER_RANDOM_SHUFFLE_MINT = \\\"TIER_RANDOM_SHUFFLE_MINT\\\";\\r\\n\\r\\n    string constant ATTRIBUTE_MAX_AMOUNT = \\\"MAX_AMOUNT\\\";\\r\\n    string constant ATTRIBUTE_TOTAL_AMOUNT = \\\"TOTAL_AMOUNT\\\";\\r\\n    string constant ATTRIBUTE_IS_TRANSFERABLE = \\\"IS_TRANSFERABLE\\\";\\r\\n    string constant ATTRIBUTE_UNLOCKS_AT_HOURS = \\\"TRANSFER_UNLOCKS_AT_HOURS\\\";\\r\\n    string constant BURN_POLICY_ERROR = \\\"BURN_POLICY_ERROR\\\";\\r\\n\\r\\n    bytes32 private constant gasKeyHash = 0x6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f93;\\r\\n    uint32 private constant callbackGasLimit = 500000;\\r\\n    uint32 private constant numWords = 1;\\r\\n    uint16 private constant requestConfirmations = 3;\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    bool private __0; // @param removed: isTransferable\\r\\n    uint32 private __1; // @param removed: transferUnlocksAtHours\\r\\n    uint32 internal _nextTokenId;\\r\\n\\r\\n    mapping(uint32 => Properties) internal _propertiesByTokenId;\\r\\n    // @param Mapping from KeyHash to mapping Attributes\\r\\n    mapping(KeyHash => mapping(bytes32 => Attributes)) internal _attributesByPropertyKey;\\r\\n\\r\\n    mapping(bytes32 => uint32[]) internal _randomShuffleUnusedArtworkIds;\\r\\n\\r\\n    string private _editableName;\\r\\n    string private _editableSymbol;\\r\\n    bool private _restrictBurnPolicy;\\r\\n    VRFCoordinatorV2Interface private vrfCoordinator;\\r\\n    uint64 private subscriptionId;\\r\\n    mapping(uint256 => VRFRequest) internal requests;\\r\\n\\r\\n    event SetAttribute(string propKey, bytes32 propValue, string attrKey, bytes32 attrValue);\\r\\n    event Mint(uint32 tokenId, string[] propKeys, bytes32[] propValues);\\r\\n    event Burn(uint32 tokenId);\\r\\n    event SetName(string name);\\r\\n    event SetSymbol(string symbol);\\r\\n    event SetBaseURI(string uri);\\r\\n\\r\\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\\r\\n\\r\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Context) returns (address sender) {\\r\\n        sender = ERC2771Context._msgSender();\\r\\n    }\\r\\n\\r\\n    // @dev Corresponds if contexts is both upgradeable and suits ERC2771\\r\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Context) returns (bytes calldata) {\\r\\n        return ERC2771Context._msgData();\\r\\n    }\\r\\n\\r\\n    function initialize(Initialization calldata init) external initializer {\\r\\n        _transferOwnership(init.openseaOwner);\\r\\n\\r\\n        __ERC721_init(init.name, init.symbol);\\r\\n        __App_init(init.kernel);\\r\\n\\r\\n        baseURI = init.baseURI;\\r\\n        _editableName = init.name;\\r\\n        _editableSymbol = init.symbol;\\r\\n        emit SetBaseURI(baseURI);\\r\\n        emit SetName(_editableName);\\r\\n        emit SetSymbol(_editableSymbol);\\r\\n    }\\r\\n\\r\\n    function contractURI() external view returns (string memory) {\\r\\n        return string(abi.encodePacked(baseURI, \\\"contract\\\"));\\r\\n    }\\r\\n\\r\\n    function hasRandomMint(bytes32 tier) public view returns (bool) {\\r\\n        return _getAttribute(PROPERTY_TIER, tier, ATTRIBUTE_TIER_RANDOM_MINT) == bytes32(bytes1(0x01));\\r\\n    }\\r\\n\\r\\n    function hasRandomShuffleMint(bytes32 tier) public view returns (bool) {\\r\\n        return _getAttribute(PROPERTY_TIER, tier, ATTRIBUTE_TIER_RANDOM_SHUFFLE_MINT) == bytes32(bytes1(0x01));\\r\\n    }\\r\\n\\r\\n    function tierExtraArtworksNum(bytes32 tier) public view returns (uint256) {\\r\\n        return uint256(_getAttribute(PROPERTY_TIER, tier, ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM));\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        uint32 tokenIdU32 = uint32(tokenId);\\r\\n        bytes32 tier = _getPropertyValue(tokenIdU32, PROPERTY_TIER);\\r\\n        if (tierExtraArtworksNum(tier) != 0) {\\r\\n            uint256 artworkId = uint256(_getPropertyValue(tokenIdU32, PROPERTY_ARTWORK_ID));\\r\\n            return string(abi.encodePacked(baseURI, Utils.bytes32ToString(tier), \\\"/\\\", artworkId.toString()));\\r\\n        } else {\\r\\n            return string(abi.encodePacked(baseURI, Utils.bytes32ToString(tier)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAttribute(\\r\\n        string memory propKey,\\r\\n        bytes32 propValue,\\r\\n        string memory attrKey\\r\\n    ) external view returns (bytes32) {\\r\\n        return _getAttribute(propKey, propValue, attrKey);\\r\\n    }\\r\\n\\r\\n    function getPropertyValue(uint32 tokenId, string calldata key) external view returns (bytes32) {\\r\\n        return _getPropertyValue(tokenId, key);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata uri) external requirePermission(CONTROLLER) {\\r\\n        baseURI = uri;\\r\\n        emit SetBaseURI(uri);\\r\\n    }\\r\\n\\r\\n    function setRestrictBurnPolicy(bool burnPolicy) external requirePermission(CONTROLLER) {\\r\\n        _restrictBurnPolicy = burnPolicy;\\r\\n    }\\r\\n\\r\\n    function getRestrictBurnPolicy() external view returns (bool) {\\r\\n        return _restrictBurnPolicy;\\r\\n    }\\r\\n\\r\\n    function setupVRF(VRFCoordinatorV2Interface _vrfCoordinator, uint64 _subscriptionId)\\r\\n        external\\r\\n        requirePermission(CONTROLLER)\\r\\n    {\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        subscriptionId = _subscriptionId;\\r\\n    }\\r\\n\\r\\n    function setRandomShuffleMint(bytes32 tierValue, uint256 tokenCount) external requirePermission(CONTROLLER) {\\r\\n        require(tokenCount > 1); // otherwise it's a `one-of-many`\\r\\n        require(tokenCount <= 5000); // TODO: to avoid block gas limit; add iterative initialization in the future\\r\\n        require(!hasRandomMint(tierValue) && !hasRandomShuffleMint(tierValue)); // TODO: -1 SLOAD\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_RANDOM_SHUFFLE_MINT, bytes32(bytes1(0x01)));\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_MAX_AMOUNT, bytes32(tokenCount));\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM, bytes32(tokenCount - 1));\\r\\n        _randomShuffleUnusedArtworkIds[tierValue] = new uint32[](tokenCount);\\r\\n        uint32[] storage ids = _randomShuffleUnusedArtworkIds[tierValue];\\r\\n        for (uint256 i; i != tokenCount; ++i) {\\r\\n            ids[i] = uint32(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRandomMint(\\r\\n        bytes32 tierValue,\\r\\n        uint256 tokenCount,\\r\\n        uint256 artworksCount\\r\\n    ) external requirePermission(CONTROLLER) {\\r\\n        require(artworksCount > 1); // otherwise it's a `one-of-many`\\r\\n        require(artworksCount <= 5000); // TODO: to avoid block gas limit; add iterative initialization in the future\\r\\n        require(!hasRandomShuffleMint(tierValue) && !hasRandomMint(tierValue)); // TODO: -1 SLOAD\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_RANDOM_MINT, bytes32(bytes1(0x01)));\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_MAX_AMOUNT, bytes32(tokenCount));\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM, bytes32(artworksCount - 1));\\r\\n    }\\r\\n\\r\\n    function mint(address to, bytes32 tierValue) external requirePermission(CONTROLLER) {\\r\\n        // @dev default max amount is 0 so the tier --must-- be set & configured\\r\\n        uint256 maxAmountByTier = uint256(_getAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_MAX_AMOUNT));\\r\\n        uint256 totalAmountByTier = uint256(_getAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT));\\r\\n        bool randomMintByTier = hasRandomMint(tierValue);\\r\\n        bool randomShuffleMintByTier = hasRandomShuffleMint(tierValue);\\r\\n\\r\\n        require(totalAmountByTier < maxAmountByTier, INVALID_TIER_AMOUNT_ERROR);\\r\\n\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT, bytes32(++totalAmountByTier));\\r\\n        _propertiesByTokenId[_nextTokenId].properties[_calculateKeyHash(PROPERTY_TIER)] = tierValue;\\r\\n\\r\\n        uint32 tokenId = _nextTokenId;\\r\\n        _nextTokenId++;\\r\\n\\r\\n        if (randomShuffleMintByTier || randomMintByTier) {\\r\\n            if (address(vrfCoordinator) != address(0)) {\\r\\n                uint256 requestId = vrfCoordinator.requestRandomWords(\\r\\n                    gasKeyHash,\\r\\n                    subscriptionId,\\r\\n                    requestConfirmations,\\r\\n                    callbackGasLimit,\\r\\n                    numWords\\r\\n                );\\r\\n                requests[requestId] = VRFRequest({to: to, tierValue: tierValue, tokenId: tokenId});\\r\\n            } else {\\r\\n                uint256 rand = Utils.pseudorand(abi.encodePacked(to));\\r\\n                _randomMint(rand, to, tokenId, tierValue);\\r\\n            }\\r\\n        } else {\\r\\n            _mintWithProperties(to, tokenId, tierValue, bytes32(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(uint32 tokenId) external requirePermission(CONTROLLER) {\\r\\n        _burn(tokenId);\\r\\n\\r\\n        KeyHash propertyTierKey = _calculateKeyHash(PROPERTY_TIER);\\r\\n        bytes32 tierValue = _propertiesByTokenId[tokenId].properties[propertyTierKey];\\r\\n        uint256 totalAmountByTier = uint256(_getAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT));\\r\\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT, bytes32(--totalAmountByTier));\\r\\n\\r\\n        _propertiesByTokenId[tokenId].properties[propertyTierKey] = bytes32(0);\\r\\n        emit Burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function setAttribute(\\r\\n        string memory propKey,\\r\\n        bytes32 propValue,\\r\\n        string memory attrKey,\\r\\n        bytes32 attrValue\\r\\n    ) external requirePermission(CONTROLLER) {\\r\\n        _setAttribute(propKey, propValue, attrKey, attrValue);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal view override {\\r\\n        require(to != address(0) || !_restrictBurnPolicy, BURN_POLICY_ERROR);\\r\\n\\r\\n        if (from != address(0) && to != address(0)) {\\r\\n            bytes32 propValue = _getPropertyValue(uint32(tokenId), PROPERTY_TIER);\\r\\n            uint256 isTransferable = uint256(_getAttribute(PROPERTY_TIER, propValue, ATTRIBUTE_IS_TRANSFERABLE));\\r\\n            uint256 unlockTransferTimestamp = uint256(\\r\\n                _getAttribute(PROPERTY_TIER, propValue, ATTRIBUTE_UNLOCKS_AT_HOURS)\\r\\n            );\\r\\n            require(isTransferable == 1 && block.timestamp / 1 hours > unlockTransferTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function _setAttribute(\\r\\n        string memory propKey,\\r\\n        bytes32 propValue,\\r\\n        string memory attrKey,\\r\\n        bytes32 attrValue\\r\\n    ) internal {\\r\\n        _attributesByPropertyKey[_calculateKeyHash(propKey)][propValue].attributes[\\r\\n            _calculateKeyHash(attrKey)\\r\\n        ] = attrValue;\\r\\n\\r\\n        emit SetAttribute(propKey, propValue, attrKey, attrValue);\\r\\n    }\\r\\n\\r\\n    function _getAttribute(\\r\\n        string memory propKey,\\r\\n        bytes32 propValue,\\r\\n        string memory attrKey\\r\\n    ) internal view returns (bytes32) {\\r\\n        return _attributesByPropertyKey[_calculateKeyHash(propKey)][propValue].attributes[_calculateKeyHash(attrKey)];\\r\\n    }\\r\\n\\r\\n    function _getPropertyValue(uint32 tokenId, string memory key) internal view returns (bytes32) {\\r\\n        return _propertiesByTokenId[tokenId].properties[_calculateKeyHash(key)];\\r\\n    }\\r\\n\\r\\n    function _calculateKeyHash(string memory key) private pure returns (KeyHash) {\\r\\n        return KeyHash.wrap(keccak256(abi.encodePacked(key)));\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal {\\r\\n        VRFRequest memory req = requests[requestId];\\r\\n        _randomMint(randomWords[0], req.to, req.tokenId, req.tierValue);\\r\\n    }\\r\\n\\r\\n    function _randomMint(\\r\\n        uint256 rand,\\r\\n        address to,\\r\\n        uint32 tokenId,\\r\\n        bytes32 tierValue\\r\\n    ) internal {\\r\\n        bytes32 artworkIdPropValue;\\r\\n        uint256 extraArtworksNumByTier = tierExtraArtworksNum(tierValue);\\r\\n        bool randomShuffleMintByTier = hasRandomShuffleMint(tierValue);\\r\\n        bool randomMintByTier = hasRandomMint(tierValue);\\r\\n        if (randomMintByTier) {\\r\\n            uint256 artworkId = rand;\\r\\n            artworkIdPropValue = bytes32(artworkId % (extraArtworksNumByTier + 1));\\r\\n        } else if (randomShuffleMintByTier) {\\r\\n            // Knuth random shuffle\\r\\n            uint32[] storage ids = _randomShuffleUnusedArtworkIds[tierValue];\\r\\n            uint256 len = ids.length;\\r\\n            uint256 rnd = rand;\\r\\n            uint256 ptr = ids[rnd % len];\\r\\n            uint256 val = ids[ptr];\\r\\n            (ids[ptr], ids[len - 1]) = (ids[len - 1], ids[ptr]);\\r\\n            delete ids[len - 1];\\r\\n            ids.pop();\\r\\n            artworkIdPropValue = bytes32(val);\\r\\n        }\\r\\n\\r\\n        _mintWithProperties(to, tokenId, tierValue, artworkIdPropValue);\\r\\n    }\\r\\n\\r\\n    function _mintWithProperties(\\r\\n        address to,\\r\\n        uint32 tokenId,\\r\\n        bytes32 tierValue,\\r\\n        bytes32 artworkIdPropValue\\r\\n    ) internal {\\r\\n        string[] memory propKeys = new string[](2);\\r\\n        bytes32[] memory propValues = new bytes32[](2);\\r\\n        propKeys[0] = PROPERTY_TIER;\\r\\n        propKeys[1] = PROPERTY_ARTWORK_ID;\\r\\n        propValues[0] = tierValue;\\r\\n        propValues[1] = artworkIdPropValue;\\r\\n        _propertiesByTokenId[tokenId].properties[_calculateKeyHash(PROPERTY_ARTWORK_ID)] = artworkIdPropValue;\\r\\n\\r\\n        _mint(to, tokenId);\\r\\n\\r\\n        emit Mint(tokenId, propKeys, propValues);\\r\\n    }\\r\\n\\r\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\r\\n        require(msg.sender == address(vrfCoordinator), \\\"\\\");\\r\\n        fulfillRandomWords(requestId, randomWords);\\r\\n    }\\r\\n\\r\\n    function setName(string calldata name_) external requirePermission(CONTROLLER) {\\r\\n        _editableName = name_;\\r\\n        emit SetName(_editableName);\\r\\n    }\\r\\n\\r\\n    function setSymbol(string calldata symbol_) external requirePermission(CONTROLLER) {\\r\\n        _editableSymbol = symbol_;\\r\\n        emit SetSymbol(_editableSymbol);\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _editableName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _editableSymbol;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfcb0d129b92619ec1a5d5091e5a5c2b54f861e0cedea7e70c90113de08dbadab\",\"license\":\"UNLICENSED\"},\"contracts/apps/Interfaces/IVRFCoordinatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface VRFCoordinatorV2Interface {\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint16 minimumRequestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x52a61d56eb9407749e069b6dbbe841904430183e2dc07ca00080fb78c3e7346e\",\"license\":\"UNLICENSED\"},\"contracts/apps/UpgradeableApp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UpgradeableApp\\r\\n * @notice Defines the basic implementation slot fo.\\r\\n *\\r\\n **/\\r\\ncontract UpgradeableApp {\\r\\n    bytes32 private constant _IMPLEMENTATION_SLOT =\\r\\n        bytes32(uint256(keccak256(\\\"co.superdao.app.proxy.implementation\\\")) - 1);\\r\\n\\r\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    uint256[100] private __gap;\\r\\n\\r\\n    // @dev Finds value for Implementation Slot\\r\\n    function _getImplementationSlot() internal pure returns (StorageSlot.AddressSlot storage) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT);\\r\\n    }\\r\\n\\r\\n    function _getBeaconSlot() internal pure returns (StorageSlot.AddressSlot storage) {\\r\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x58c48d2c039198304a5f7cb435f4b1572fbc230ece8d8d97edc34a78fa285417\",\"license\":\"UNLICENSED\"},\"contracts/kernel/interfaces/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.12;\\n\\ninterface IACL {\\n    function addPermission(\\n        bytes32 entity,\\n        bytes32 app,\\n        uint8 permission\\n    ) external;\\n\\n    function removePermission(\\n        bytes32 entity,\\n        bytes32 app,\\n        uint8 permission\\n    ) external;\\n\\n    function getPermissions(bytes32 entity, bytes32 app) external view returns (bytes2);\\n\\n    function hasPermission(\\n        address entityAddress,\\n        address appAddress,\\n        uint8 permissionId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7764183a14e8f48e63b1d5378e037729895e95500d774429130c614ab082881e\",\"license\":\"UNLICENSED\"},\"contracts/kernel/interfaces/IAppManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IAppManager {\\r\\n    function connectApp(\\r\\n        bytes32 id,\\r\\n        address appAddress,\\r\\n        bool isNative\\r\\n    ) external;\\r\\n\\r\\n    function resetApp(\\r\\n        bytes32 id,\\r\\n        address appAddress,\\r\\n        bool isNative\\r\\n    ) external;\\r\\n\\r\\n    function getAppAddress(bytes32 id) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xf4d78da3043358d5f7a33d8c2dc51b27441c423c7bdf24e672c7f5c3539fb72f\",\"license\":\"UNLICENSED\"},\"contracts/kernel/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./IACL.sol\\\";\\r\\nimport \\\"./IAppManager.sol\\\";\\r\\n\\r\\ninterface IKernel is IACL, IAppManager {\\r\\n    function getUpdateManager() external view returns (address);\\r\\n\\r\\n    function upgradeApp(bytes32 id) external;\\r\\n\\r\\n    function setTreasury(address treasury) external;\\r\\n\\r\\n    function getTreasury() external view returns (address);\\r\\n\\r\\n    function deploySafe(address[] calldata owners, uint256 threshold) external returns (address);\\r\\n    \\r\\n    function deployApp(bytes32 id, bytes calldata data) external returns (address);\\r\\n\\r\\n    event SafeDeployed(address safe);\\r\\n\\r\\n    event TreasuryChanged(address treasury);\\r\\n}\\r\\n\",\"keccak256\":\"0x4813a4d785d575d56c1a87a0653ccfa47999932df45d781fddb95cb7ff6c6f20\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Exceptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary Exceptions {\\r\\n    string constant INVALID_INITIALIZATION_ERROR = \\\"INITIALIZATION\\\";\\r\\n    string constant INVALID_AUTHORIZATION_ERROR = \\\"AUTHORIZATION\\\";\\r\\n    string constant INVARIANT_ERROR = \\\"INVARIANT\\\";\\r\\n    string constant VALIDATION_ERROR = \\\"VALIDATION\\\";\\r\\n    string constant UNAVAILABLE_ERROR = \\\"UNAVAILABLE\\\";\\r\\n    string constant NOT_ACTIVE_ERROR = \\\"NOT_ACTIVE\\\";\\r\\n    string constant NO_TREASURY_ADDRESS = \\\"NO_TREASURY_ADDRESS\\\";\\r\\n    string constant APP_WAS_INITED_ERROR = \\\"APP_WAS_INITED\\\";\\r\\n    string constant ILLEGAL_ADDRESS = \\\"ADDRESS_ASSOCIATES_WITH_APP\\\";\\r\\n    string constant BUY_LIMIT_ERROR = \\\"BUY_LIMIT_ERROR\\\";\\r\\n    string constant NULL_TOKEN_ADDRESS = \\\"NULL_TOKEN_ADDRESS\\\";\\r\\n    string constant UNSUPPORTED_TOKEN_ADDRESS = \\\"UNSUPPORTED_TOKEN_ADDRESS\\\";\\r\\n    string constant NOT_FOUND_PRICE_FOR_TIER = \\\"NOT_FOUND_PRICE_FOR_TIER\\\";\\r\\n    string constant INSUFFICIENT_AMOUNTS_OF_FUNDS = \\\"INSUFFICIENT_AMOUNTS_OF_FUNDS\\\";\\r\\n    string constant INSUFFICIENT_ALLOWANCE = \\\"INSUFFICIENT_ALLOWANCE\\\";\\r\\n    string constant BASIC_TOKEN_ADDRESS_NOT_SET = \\\"BASIC_TOKEN_ADDRESS_NOT_SET\\\";\\r\\n    string constant LIQUIDITY_POOL_NOT_FOUND = \\\"LIQUIDITY_POOL_NOT_FOUND\\\";\\r\\n    string constant ADDRESS_IS_NOT_CONTRACT = \\\"ADDRESS_IS_NOT_CONTRACT\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0xf1d1c7f5e4a86331e2b64c263a6aab287dfa44cba40540a87204244ed8e99d8d\",\"license\":\"MIT\"},\"contracts/libraries/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nabstract contract __with_semver {\\n    uint8 private immutable __semver_major;\\n    uint8 private immutable __semver_minor;\\n    uint8 private immutable __semver_patch;\\n\\n    constructor(\\n        uint8 _major,\\n        uint8 _minor,\\n        uint8 _patch\\n    ) {\\n        __semver_major = _major;\\n        __semver_minor = _minor;\\n        __semver_patch = _patch;\\n    }\\n\\n    function __semver() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"v\\\",\\n                    uint8(0x30) + __semver_major,\\n                    \\\".\\\",\\n                    uint8(0x30) + __semver_minor,\\n                    \\\".\\\",\\n                    uint8(0x30) + __semver_patch\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x393fd2cd95660e9c0539e5fe740cd83167522ba53402b785a77684dd3892eb03\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary Utils {\\r\\n    function pseudorand(bytes memory extra) internal view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, extra)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev In the loop if ptr is less than 32 bites and tier does not equal 0,\\r\\n     * adds a value to ptr.\\r\\n     * Allocated memory is fixed in this function\\r\\n     */\\r\\n    function bytes32ToString(bytes32 tier) internal pure returns (string memory) {\\r\\n        uint8 ptr;\\r\\n        while (ptr < 32 && tier[ptr] != 0) {\\r\\n            ++ptr;\\r\\n        }\\r\\n        bytes memory tmp = new bytes(ptr);\\r\\n        for (uint8 i; i != ptr; ++i) {\\r\\n            tmp[i] = tier[i];\\r\\n        }\\r\\n        return string(tmp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa9d414f961dbc584decfd8da7355a95b740cdc578dfa3b847347f8f43a4b1b80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c8063715018a611610151578063b88d4fde116100c3578063d4aae0c411610087578063d4aae0c414610559578063e88703241461056d578063e8a3d48514610580578063e985e9c514610588578063ee0fc121146105c4578063f2fde38b146105fd57600080fd5b8063b88d4fde14610501578063c327f66014610514578063c47f002714610527578063c87b56dd1461053a578063cdaff02a1461054d57600080fd5b80638da5cb5b116101155780638da5cb5b1461049c57806390d3786e146104ad57806395d89b41146104c0578063a22cb465146104c8578063a48c0729146104db578063b84c8246146104ee57600080fd5b8063715018a6146104535780637a5984c41461045b5780637effd8a71461046e5780637f0c9b63146104765780638c7944671461048957600080fd5b80633f58ef4b116101ea5780635a9b0f48116101ae5780635a9b0f48146103e95780635c60da1b146103fc5780635c7a3ef7146104045780636352211e146104175780636c0360eb1461042a57806370a082311461043257600080fd5b80633f58ef4b1461035d57806342842e0e1461037057806355f804b314610383578063560ec19714610396578063572b6c05146103a957600080fd5b8063095ea7b311610231578063095ea7b3146102fe578063133d9c6f146103115780631fe543e31461032457806323b872dd146103375780632cfd30051461034a57600080fd5b806301ffc9a71461026e578063064e319d1461029657806306fdde03146102ab578063081812fc146102c05780630900f010146102eb575b600080fd5b61028161027c3660046137ba565b610610565b60405190151581526020015b60405180910390f35b6102a96102a43660046137de565b610662565b005b6102b3610823565b60405161028d9190613862565b6102d36102ce366004613875565b6108b6565b6040516001600160a01b03909116815260200161028d565b6102a96102f93660046138a3565b61094b565b6102a961030c3660046138c0565b610a0b565b6102a961031f3660046138ec565b610b33565b6102a9610332366004613954565b610dc5565b6102a9610345366004613a05565b610e0d565b6102a96103583660046138c0565b610e45565b61028161036b366004613875565b61127f565b6102a961037e366004613a05565b6112e6565b6102a9610391366004613a8e565b611301565b6102a96103a4366004613acf565b6113bc565b6102816103b73660046138a3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6102a96103f7366004613b8b565b61147b565b6102d36114f6565b6102a9610412366004613bff565b61150f565b6102d3610425366004613875565b611732565b6102b36117a9565b6104456104403660046138a3565b611838565b60405190815260200161028d565b6102a96118bf565b6102a9610469366004613c4d565b611944565b6102b3611b0d565b6102a9610484366004613c76565b611bf0565b610445610497366004613875565b611c74565b60fb546001600160a01b03166102d3565b6104456104bb366004613c93565b611ccc565b6102b3611ce1565b6102a96104d6366004613cff565b611cf1565b6102a96104e9366004613d2d565b611d03565b6102a96104fc366004613a8e565b611dfd565b6102a961050f366004613d5b565b611eab565b610445610522366004613dda565b611ee4565b6102a9610535366004613a8e565b611f26565b6102b3610548366004613875565b611fd4565b6101985460ff16610281565b61012d546102d3906001600160a01b031681565b61028161057b366004613875565b6120b8565b6102b3612120565b610281610596366004613d2d565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b6105eb7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161028d565b6102a961060b3660046138a3565b612135565b60006001600160e01b031982166380ac58cd60e01b148061064157506001600160e01b03198216635b5e139f60e01b145b8061065c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f000000000000000000000000000000000000000000000000000000000000000061068c8161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b815250906106d95760405162461bcd60e51b81526004016106d09190613862565b60405180910390fd5b50600182116106e757600080fd5b6113888211156106f657600080fd5b6106ff846120b8565b15801561071257506107108461127f565b155b61071b57600080fd5b60408051808201825260048152632a24a2a960e11b6020808301919091528251808401909352601083526f1512515497d490539113d357d352539560821b9083015261076d918690600160f81b6122b3565b6107ba604051806040016040528060048152602001632a24a2a960e11b815250856040518060400160405280600a81526020016913505617d05353d5539560b21b8152508660001b6122b3565b61081d604051806040016040528060048152602001632a24a2a960e11b8152508560405180604001604052806017815260200176544945525f45585452415f415254574f524b535f4e554d60481b8152506001866108189190613e42565b6122b3565b50505050565b6060610196805461083390613e59565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90613e59565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b5050505050905090565b600081815260cb60205260408120546001600160a01b031661092f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106d0565b50600090815260cd60205260409020546001600160a01b031690565b61012d546001600160a01b0316610960612344565b6001600160a01b0316146040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b815250906109ae5760405162461bcd60e51b81526004016106d09190613862565b50806109b8612353565b80546001600160a01b0319166001600160a01b0392831617905560405190821681527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d906020015b60405180910390a150565b6000610a1682611732565b9050806001600160a01b0316836001600160a01b03161415610a845760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106d0565b806001600160a01b0316610a96612344565b6001600160a01b03161480610ab25750610ab281610596612344565b610b245760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106d0565b610b2e8383612386565b505050565b7f0000000000000000000000000000000000000000000000000000000000000000610b5d8161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b81525090610ba15760405162461bcd60e51b81526004016106d09190613862565b5060018211610baf57600080fd5b611388821115610bbe57600080fd5b610bc78361127f565b158015610bda5750610bd8836120b8565b155b610be357600080fd5b60408051808201825260048152632a24a2a960e11b602080830191909152825180840190935260188352771512515497d490539113d357d4d2155191931157d352539560421b90830152610c3d918590600160f81b6122b3565b610c8a604051806040016040528060048152602001632a24a2a960e11b815250846040518060400160405280600a81526020016913505617d05353d5539560b21b8152508560001b6122b3565b610ce8604051806040016040528060048152602001632a24a2a960e11b8152508460405180604001604052806017815260200176544945525f45585452415f415254574f524b535f4e554d60481b8152506001866108189190613e42565b816001600160401b03811115610d0057610d0061390e565b604051908082528060200260200182016040528015610d29578160200160208202803683370190505b506000848152610195602090815260409091208251610d4e93919291909101906135f8565b50600083815261019560205260408120905b838114610dbe5780828281548110610d7a57610d7a613e94565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555080610db790613eaa565b9050610d60565b5050505050565b6101985461010090046001600160a01b03163314610dff5760405162461bcd60e51b815260206004820152600060248201526044016106d0565b610e0982826123f4565b5050565b610e1e610e18612344565b82612468565b610e3a5760405162461bcd60e51b81526004016106d090613ec5565b610b2e83838361255e565b7f0000000000000000000000000000000000000000000000000000000000000000610e6f8161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b81525090610eb35760405162461bcd60e51b81526004016106d09190613862565b506000610eff604051806040016040528060048152602001632a24a2a960e11b815250846040518060400160405280600a81526020016913505617d05353d5539560b21b815250612705565b60001c90506000610f51604051806040016040528060048152602001632a24a2a960e11b815250856040518060400160405280600c81526020016b1513d5105317d05353d5539560a21b815250612705565b90506000610f5e8561127f565b90506000610f6b866120b8565b90508383106040518060400160405280601981526020017f494e56414c49445f544945525f414d4f554e545f4552524f520000000000000081525090610fc45760405162461bcd60e51b81526004016106d09190613862565b5061101d604051806040016040528060048152602001632a24a2a960e11b815250876040518060400160405280600c81526020016b1513d5105317d05353d5539560a21b8152508661101590613eaa565b9650866122b3565b6101925465010000000000900463ffffffff16600090815261019360209081526040808320815180830190925260048252632a24a2a960e11b928201929092528892906110699061275a565b8152602081019190915260400160002055610192805465010000000000900463ffffffff16908190600561109c83613f16565b91906101000a81548163ffffffff021916908363ffffffff1602179055505081806110c45750825b15611268576101985461010090046001600160a01b03161561121a57610198546040516305d3b1d360e41b81527f6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f936004820152600160a81b82046001600160401b03166024820152600360448201526207a12060648201526001608482015260009161010090046001600160a01b031690635d3b1d309060a4016020604051808303816000875af115801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190613f3a565b604080516060810182526001600160a01b038c8116825260208083018d815263ffffffff888116858701908152600097885261019990935294909520925183546001600160a01b03191692169190911782559251600182015591516002909201805463ffffffff19169290911691909117905550611275565b6040516bffffffffffffffffffffffff1960608a901b1660208201526000906112549060340160405160208183030381529060405261278a565b9050611262818a848b6127bf565b50611275565b6112758882896000612a52565b5050505050505050565b6000600160f81b6001600160f81b0319166112df604051806040016040528060048152602001632a24a2a960e11b815250846040518060400160405280601081526020016f1512515497d490539113d357d352539560821b815250612705565b1492915050565b610b2e83838360405180602001604052806000815250611eab565b7f000000000000000000000000000000000000000000000000000000000000000061132b8161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b8152509061136f5760405162461bcd60e51b81526004016106d09190613862565b5061137d61019184846136a7565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa83836040516113af929190613f53565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006113e68161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b8152509061142a5760405162461bcd60e51b81526004016106d09190613862565b505061019880546001600160401b03909216600160a81b0267ffffffffffffffff60a81b196001600160a01b039094166101000293909316610100600160e81b031990921691909117919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006114a58161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b815250906114e95760405162461bcd60e51b81526004016106d09190613862565b50610dbe858585856122b3565b6000611500612353565b546001600160a01b0316919050565b600061151b6001612c15565b90508015611533576064805461ff0019166101001790555b61154b61154660408401602085016138a3565b612ca4565b6115d761155b6060840184613f82565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159d925050506080850185613f82565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cf692505050565b6115ec6115e760208401846138a3565b612d27565b6115f96040830183613f82565b61160691610191916136a7565b506116146060830183613f82565b61162191610196916136a7565b5061162f6080830183613f82565b61163c91610197916136a7565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa61019160405161166e9190613fc8565b60405180910390a17f4df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf026101966040516116a79190613fc8565b60405180910390a17fadf3ae8bd543b3007d464f15cb8ea1db3f44e84d41d203164f40b95e27558ac66101976040516116e09190613fc8565b60405180910390a18015610e09576064805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b600081815260cb60205260408120546001600160a01b03168061065c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106d0565b61019180546117b790613e59565b80601f01602080910402602001604051908101604052809291908181526020018280546117e390613e59565b80156118305780601f1061180557610100808354040283529160200191611830565b820191906000526020600020905b81548152906001019060200180831161181357829003601f168201915b505050505081565b60006001600160a01b0382166118a35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106d0565b506001600160a01b0316600090815260cc602052604090205490565b6118c7612344565b6001600160a01b03166118e260fb546001600160a01b031690565b6001600160a01b0316146119385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d0565b6119426000612ca4565b565b7f000000000000000000000000000000000000000000000000000000000000000061196e8161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b815250906119b25760405162461bcd60e51b81526004016106d09190613862565b506119c28263ffffffff16612d9d565b60006119e9604051806040016040528060048152602001632a24a2a960e11b81525061275a565b63ffffffff84166000908152610193602090815260408083208484528252808320548151808301835260048152632a24a2a960e11b818501528251808401909352600c83526b1513d5105317d05353d5539560a21b93830193909352939450611a5491908490612705565b60001c9050611ab1604051806040016040528060048152602001632a24a2a960e11b815250836040518060400160405280600c81526020016b1513d5105317d05353d5539560a21b81525084611aa99061404d565b9450846122b3565b63ffffffff851660008181526101936020908152604080832087845282528083209290925590519182527f3b651b2c4e677c2a060d746e3a06d84c64e2e9c8c268f92bd293357b7c5b9c01910160405180910390a15050505050565b6060611b3a7f00000000000000000000000000000000000000000000000000000000000000006030614064565b611b657f00000000000000000000000000000000000000000000000000000000000000006030614064565b611b907f00000000000000000000000000000000000000000000000000000000000000006030614064565b604051603b60f91b60208201526001600160f81b031960f894851b81166021830152601760f91b6022830181905293851b811660238301526024820193909352921b1660258201526026015b604051602081830303815290604052905090565b7f0000000000000000000000000000000000000000000000000000000000000000611c1a8161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b81525090611c5e5760405162461bcd60e51b81526004016106d09190613862565b5050610198805460ff1916911515919091179055565b600061065c604051806040016040528060048152602001632a24a2a960e11b8152508360405180604001604052806017815260200176544945525f45585452415f415254574f524b535f4e554d60481b815250612705565b6000611cd9848484612705565b949350505050565b6060610197805461083390613e59565b610e09611cfc612344565b8383612e44565b61012d546001600160a01b0316611d18612344565b6001600160a01b0316146040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b81525090611d665760405162461bcd60e51b81526004016106d09190613862565b507fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b03841617905580611daa612353565b80546001600160a01b0319166001600160a01b0392831617905560408051848316815291831660208301527f8d0a39ac1f9e86fa663c9ebacb96ff6336e1aefc4e67397d5aa0bcc7b3b7c74b9101611726565b7f0000000000000000000000000000000000000000000000000000000000000000611e278161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b81525090611e6b5760405162461bcd60e51b81526004016106d09190613862565b50611e7961019784846136a7565b507fadf3ae8bd543b3007d464f15cb8ea1db3f44e84d41d203164f40b95e27558ac66101976040516113af9190613fc8565b611ebc611eb6612344565b83612468565b611ed85760405162461bcd60e51b81526004016106d090613ec5565b61081d84848484612f13565b6000611cd98484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4692505050565b7f0000000000000000000000000000000000000000000000000000000000000000611f508161221f565b6040518060400160405280600d81526020016c20aaaa2427a924ad20aa24a7a760991b81525090611f945760405162461bcd60e51b81526004016106d09190613862565b50611fa261019684846136a7565b507f4df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf026101966040516113af9190613fc8565b60606000829050600061200382604051806040016040528060048152602001632a24a2a960e11b815250612f46565b905061200e81611c74565b15612083576000612041836040518060400160405280600a81526020016910549515d3d492d7d25160b21b815250612f46565b905061019161204f83612f7d565b61205883613082565b60405160200161206a939291906140f8565b6040516020818303038152906040529350505050919050565b61019161208f82612f7d565b6040516020016120a092919061413e565b60405160208183030381529060405292505050919050565b6000600160f81b6001600160f81b0319166112df604051806040016040528060048152602001632a24a2a960e11b81525084604051806040016040528060188152602001771512515497d490539113d357d4d2155191931157d352539560421b815250612705565b6060610191604051602001611bdc9190614163565b61213d612344565b6001600160a01b031661215860fb546001600160a01b031690565b6001600160a01b0316146121ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d0565b6001600160a01b0381166122135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b61221c81612ca4565b50565b61012d546000906001600160a01b031663ed82f4b861223c612344565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260ff85166044820152606401602060405180830381865afa15801561228f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c9190614187565b8061019460006122c28761275a565b8152602001908152602001600020600085815260200190815260200160002060000160006122ef8561275a565b8152602001908152602001600020819055507fbbe342562e0ebf0c240ad60bed2824976fe39daef3367ce1386eda4639f9db328484848460405161233694939291906141a4565b60405180910390a150505050565b600061234e61317f565b905090565b600061234e61238360017f797d7c7d0df25d67e029b044c5bcb2b89d68f6483382b5f85e64485950ed88d1613e42565b90565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906123bb82611732565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600082815261019960209081526040808320815160608101835281546001600160a01b031681526001820154938101939093526002015463ffffffff169082015282519091610b2e9184919061244c5761244c613e94565b60200260200101518260000151836040015184602001516127bf565b600081815260cb60205260408120546001600160a01b03166124e15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106d0565b60006124ec83611732565b9050806001600160a01b0316846001600160a01b0316148061253357506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611cd95750836001600160a01b031661254c846108b6565b6001600160a01b031614949350505050565b826001600160a01b031661257182611732565b6001600160a01b0316146125d55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106d0565b6001600160a01b0382166126375760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106d0565b6126428383836131c4565b61264d600082612386565b6001600160a01b038316600090815260cc60205260408120805460019290612676908490613e42565b90915550506001600160a01b038216600090815260cc602052604081208054600192906126a49084906141e1565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061019460006127158661275a565b8152602001908152602001600020600084815260200190815260200160002060000160006127428461275a565b81526020019081526020016000205490509392505050565b60008160405160200161276d91906141f9565b604051602081830303815290604052805190602001209050919050565b60004442836040516020016127a193929190614215565b60408051601f19818403018152919052805160209091012092915050565b6000806127cb83611c74565b905060006127d8846120b8565b905060006127e58561127f565b9050801561280c57876127f98460016141e1565b6128039082614258565b9450612a4a9050565b8115612a4a57600085815261019560205260408120805490918a90836128328484614258565b8154811061284257612842613e94565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff169050600084828154811061288457612884613e94565b6000918252602090912060088204015460079091166004026101000a900463ffffffff169050846128b6600186613e42565b815481106128c6576128c6613e94565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff168583815481106128fe576128fe613e94565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1686848154811061293657612936613e94565b600091825260209091206008820401906007166004028861295860018a613e42565b8154811061296857612968613e94565b90600052602060002090600891828204019190066004028491906101000a81548163ffffffff021916908363ffffffff1602179055508391906101000a81548163ffffffff021916908363ffffffff1602179055505050846001856129cd9190613e42565b815481106129dd576129dd613e94565b90600052602060002090600891828204019190066004026101000a81549063ffffffff021916905584805480612a1557612a1561426c565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590559750505050505b611275878787875b60408051600280825260608201909252600091816020015b6060815260200190600190039081612a6a5750506040805160028082526060820183529293506000929091602083019080368337019050509050604051806040016040528060048152602001632a24a2a960e11b81525082600081518110612ad457612ad4613e94565b60200260200101819052506040518060400160405280600a81526020016910549515d3d492d7d25160b21b81525082600181518110612b1557612b15613e94565b60200260200101819052508381600081518110612b3457612b34613e94565b6020026020010181815250508281600181518110612b5457612b54613e94565b6020026020010181815250508261019360008763ffffffff1663ffffffff1681526020019081526020016000206000016000612bb16040518060400160405280600a81526020016910549515d3d492d7d25160b21b81525061275a565b8152602081019190915260400160002055612bd28663ffffffff8716613357565b7f893f52173011681881e915ec9a2bef8164d895c2b95443b649ef62c91474c482858383604051612c0593929190614282565b60405180910390a1505050505050565b606454600090610100900460ff1615612c5e578160ff166001148015612c3a5750303b155b612c565760405162461bcd60e51b81526004016106d090614329565b506000919050565b60645460ff808416911610612c855760405162461bcd60e51b81526004016106d090614329565b506064805460ff191660ff92909216919091179055600190565b919050565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606454610100900460ff16612d1d5760405162461bcd60e51b81526004016106d090614377565b610e0982826134a5565b606454610100900460ff16612d4e5760405162461bcd60e51b81526004016106d090614377565b61012d80546001600160a01b0319166001600160a01b0383169081179091556040519081527f4f8cfde3439a1a302c21ca51eec26086efbfd940b8c0279889fc6bb6e73ecc6690602001610a00565b6000612da882611732565b9050612db6816000846131c4565b612dc1600083612386565b6001600160a01b038116600090815260cc60205260408120805460019290612dea908490613e42565b9091555050600082815260cb602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03161415612ea65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106d0565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612f1e84848461255e565b612f2a848484846134f3565b61081d5760405162461bcd60e51b81526004016106d0906143c2565b63ffffffff821660009081526101936020526040812081612f668461275a565b815260200190815260200160002054905092915050565b606060005b60208160ff16108015612fb65750828160ff1660208110612fa557612fa5613e94565b1a60f81b6001600160f81b03191615155b15612fcb57612fc481614414565b9050612f82565b60008160ff166001600160401b03811115612fe857612fe861390e565b6040519080825280601f01601f191660200182016040528015613012576020820181803683370190505b50905060005b8260ff168160ff161461307a57848160ff166020811061303a5761303a613e94565b1a60f81b828260ff168151811061305357613053613e94565b60200101906001600160f81b031916908160001a90535061307381614414565b9050613018565b509392505050565b6060816130a65750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130d057806130ba81613eaa565b91506130c99050600a83614434565b91506130aa565b6000816001600160401b038111156130ea576130ea61390e565b6040519080825280601f01601f191660200182016040528015613114576020820181803683370190505b5090505b8415611cd957613129600183613e42565b9150613136600a86614258565b6131419060306141e1565b60f81b81838151811061315657613156613e94565b60200101906001600160f81b031916908160001a905350613178600a86614434565b9450613118565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314156131bf575060131936013560601c90565b503390565b6001600160a01b0382161515806131df57506101985460ff16155b60405180604001604052806011815260200170212aa9272fa827a624a1acafa2a92927a960791b815250906132275760405162461bcd60e51b81526004016106d09190613862565b506001600160a01b0383161580159061324857506001600160a01b03821615155b15610b2e57600061327582604051806040016040528060048152602001632a24a2a960e11b815250612f46565b905060006132c7604051806040016040528060048152602001632a24a2a960e11b815250836040518060400160405280600f81526020016e49535f5452414e5346455241424c4560881b815250612705565b60001c9050600061332a604051806040016040528060048152602001632a24a2a960e11b815250846040518060400160405280601981526020017f5452414e534645525f554e4c4f434b535f41545f484f55525300000000000000815250612705565b9050600182148015613346575080613344610e1042614434565b115b61334f57600080fd5b505050505050565b6001600160a01b0382166133ad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106d0565b600081815260cb60205260409020546001600160a01b0316156134125760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106d0565b61341e600083836131c4565b6001600160a01b038216600090815260cc602052604081208054600192906134479084906141e1565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606454610100900460ff166134cc5760405162461bcd60e51b81526004016106d090614377565b81516134df9060c990602085019061371b565b508051610b2e9060ca90602084019061371b565b60006001600160a01b0384163b156135ed57836001600160a01b031663150b7a0261351c612344565b8786866040518563ffffffff1660e01b815260040161353e9493929190614448565b6020604051808303816000875af1925050508015613579575060408051601f3d908101601f1916820190925261357691810190614485565b60015b6135d3573d8080156135a7576040519150601f19603f3d011682016040523d82523d6000602084013e6135ac565b606091505b5080516135cb5760405162461bcd60e51b81526004016106d0906143c2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cd9565b506001949350505050565b828054828255906000526020600020906007016008900481019282156136975791602002820160005b8382111561366557835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613621565b80156136955782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613665565b505b506136a392915061378f565b5090565b8280546136b390613e59565b90600052602060002090601f0160209004810192826136d55760008555613697565b82601f106136ee5782800160ff19823516178555613697565b82800160010185558215613697579182015b82811115613697578235825591602001919060010190613700565b82805461372790613e59565b90600052602060002090601f0160209004810192826137495760008555613697565b82601f1061376257805160ff1916838001178555613697565b82800160010185558215613697579182015b82811115613697578251825591602001919060010190613774565b5b808211156136a35760008155600101613790565b6001600160e01b03198116811461221c57600080fd5b6000602082840312156137cc57600080fd5b81356137d7816137a4565b9392505050565b6000806000606084860312156137f357600080fd5b505081359360208301359350604090920135919050565b60005b8381101561382557818101518382015260200161380d565b8381111561081d5750506000910152565b6000815180845261384e81602086016020860161380a565b601f01601f19169290920160200192915050565b6020815260006137d76020830184613836565b60006020828403121561388757600080fd5b5035919050565b6001600160a01b038116811461221c57600080fd5b6000602082840312156138b557600080fd5b81356137d78161388e565b600080604083850312156138d357600080fd5b82356138de8161388e565b946020939093013593505050565b600080604083850312156138ff57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561394c5761394c61390e565b604052919050565b6000806040838503121561396757600080fd5b823591506020808401356001600160401b038082111561398657600080fd5b818601915086601f83011261399a57600080fd5b8135818111156139ac576139ac61390e565b8060051b91506139bd848301613924565b81815291830184019184810190898411156139d757600080fd5b938501935b838510156139f5578435825293850193908501906139dc565b8096505050505050509250929050565b600080600060608486031215613a1a57600080fd5b8335613a258161388e565b92506020840135613a358161388e565b929592945050506040919091013590565b60008083601f840112613a5857600080fd5b5081356001600160401b03811115613a6f57600080fd5b602083019150836020828501011115613a8757600080fd5b9250929050565b60008060208385031215613aa157600080fd5b82356001600160401b03811115613ab757600080fd5b613ac385828601613a46565b90969095509350505050565b60008060408385031215613ae257600080fd5b8235613aed8161388e565b915060208301356001600160401b0381168114613b0957600080fd5b809150509250929050565b60006001600160401b03831115613b2d57613b2d61390e565b613b40601f8401601f1916602001613924565b9050828152838383011115613b5457600080fd5b828260208301376000602084830101529392505050565b600082601f830112613b7c57600080fd5b6137d783833560208501613b14565b60008060008060808587031215613ba157600080fd5b84356001600160401b0380821115613bb857600080fd5b613bc488838901613b6b565b9550602087013594506040870135915080821115613be157600080fd5b50613bee87828801613b6b565b949793965093946060013593505050565b600060208284031215613c1157600080fd5b81356001600160401b03811115613c2757600080fd5b820160a081850312156137d757600080fd5b803563ffffffff81168114612c9f57600080fd5b600060208284031215613c5f57600080fd5b6137d782613c39565b801515811461221c57600080fd5b600060208284031215613c8857600080fd5b81356137d781613c68565b600080600060608486031215613ca857600080fd5b83356001600160401b0380821115613cbf57600080fd5b613ccb87838801613b6b565b9450602086013593506040860135915080821115613ce857600080fd5b50613cf586828701613b6b565b9150509250925092565b60008060408385031215613d1257600080fd5b8235613d1d8161388e565b91506020830135613b0981613c68565b60008060408385031215613d4057600080fd5b8235613d4b8161388e565b91506020830135613b098161388e565b60008060008060808587031215613d7157600080fd5b8435613d7c8161388e565b93506020850135613d8c8161388e565b92506040850135915060608501356001600160401b03811115613dae57600080fd5b8501601f81018713613dbf57600080fd5b613dce87823560208401613b14565b91505092959194509250565b600080600060408486031215613def57600080fd5b613df884613c39565b925060208401356001600160401b03811115613e1357600080fd5b613e1f86828701613a46565b9497909650939450505050565b634e487b7160e01b600052601160045260246000fd5b600082821015613e5457613e54613e2c565b500390565b600181811c90821680613e6d57607f821691505b60208210811415613e8e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613ebe57613ebe613e2c565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600063ffffffff80831681811415613f3057613f30613e2c565b6001019392505050565b600060208284031215613f4c57600080fd5b5051919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000808335601e19843603018112613f9957600080fd5b8301803591506001600160401b03821115613fb357600080fd5b602001915036819003821315613a8757600080fd5b6000602080835260008454613fdc81613e59565b80848701526040600180841660008114613ffd57600181146140115761403f565b60ff1985168984015260608901955061403f565b896000528660002060005b858110156140375781548b820186015290830190880161401c565b8a0184019650505b509398975050505050505050565b60008161405c5761405c613e2c565b506000190190565b600060ff821660ff84168060ff0382111561408157614081613e2c565b019392505050565b6000815461409681613e59565b600182811680156140ae57600181146140bf576140ee565b60ff198416875282870194506140ee565b8560005260208060002060005b858110156140e55781548a8201529084019082016140cc565b50505082870194505b5050505092915050565b60006141048286614089565b845161411481836020890161380a565b602f60f81b9101908152835161413181600184016020880161380a565b0160010195945050505050565b600061414a8285614089565b835161415a81836020880161380a565b01949350505050565b600061416f8284614089565b6718dbdb9d1c9858dd60c21b81526008019392505050565b60006020828403121561419957600080fd5b81516137d781613c68565b6080815260006141b76080830187613836565b85602084015282810360408401526141cf8186613836565b91505082606083015295945050505050565b600082198211156141f4576141f4613e2c565b500190565b6000825161420b81846020870161380a565b9190910192915050565b8381528260208201526000825161423381604085016020870161380a565b91909101604001949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261426757614267614242565b500690565b634e487b7160e01b600052603160045260246000fd5b60006060820163ffffffff86168352602060608185015281865180845260808601915060808160051b870101935082880160005b828110156142e457607f198887030184526142d2868351613836565b955092840192908401906001016142b6565b50505050838203604085015284518083528186019282019060005b8181101561431b578451835293830193918301916001016142ff565b509098975050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060ff821660ff81141561442b5761442b613e2c565b60010192915050565b60008261444357614443614242565b500490565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061447b90830184613836565b9695505050505050565b60006020828403121561449757600080fd5b81516137d7816137a456fea26469706673582212202294e0b5eaa9239af0d88861a2d070d2aa10830661643891a8e3afd3d1a64a3f64736f6c634300080c0033",
  "devdoc": {
    "author": "SuperdaoTeam",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "implementation()": {
        "details": "Add appCode for external access"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgrade(address)": {
        "details": "Update via appCode"
      }
    },
    "title": "ERC721Properties",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Create a new role identifier for Admin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11829,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)100_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_initialized",
        "offset": 0,
        "slot": "100",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_initializing",
        "offset": 1,
        "slot": "100",
        "type": "t_bool"
      },
      {
        "astId": 1601,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1848,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 294,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 300,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 304,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 308,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 314,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1155,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8387,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "kernel",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IKernel)13380"
      },
      {
        "astId": 8390,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_nextRoleId",
        "offset": 20,
        "slot": "301",
        "type": "t_uint8"
      },
      {
        "astId": 8394,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)99_storage"
      },
      {
        "astId": 9141,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "baseURI",
        "offset": 0,
        "slot": "401",
        "type": "t_string_storage"
      },
      {
        "astId": 9143,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__0",
        "offset": 0,
        "slot": "402",
        "type": "t_bool"
      },
      {
        "astId": 9145,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "__1",
        "offset": 1,
        "slot": "402",
        "type": "t_uint32"
      },
      {
        "astId": 9147,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_nextTokenId",
        "offset": 5,
        "slot": "402",
        "type": "t_uint32"
      },
      {
        "astId": 9152,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_propertiesByTokenId",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_uint32,t_struct(Properties)9077_storage)"
      },
      {
        "astId": 9160,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_attributesByPropertyKey",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_userDefinedValueType(KeyHash)9059,t_mapping(t_bytes32,t_struct(Attributes)9083_storage))"
      },
      {
        "astId": 9165,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_randomShuffleUnusedArtworkIds",
        "offset": 0,
        "slot": "405",
        "type": "t_mapping(t_bytes32,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 9167,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_editableName",
        "offset": 0,
        "slot": "406",
        "type": "t_string_storage"
      },
      {
        "astId": 9169,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_editableSymbol",
        "offset": 0,
        "slot": "407",
        "type": "t_string_storage"
      },
      {
        "astId": 9171,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "_restrictBurnPolicy",
        "offset": 0,
        "slot": "408",
        "type": "t_bool"
      },
      {
        "astId": 9174,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "vrfCoordinator",
        "offset": 1,
        "slot": "408",
        "type": "t_contract(VRFCoordinatorV2Interface)11805"
      },
      {
        "astId": 9176,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "subscriptionId",
        "offset": 21,
        "slot": "408",
        "type": "t_uint64"
      },
      {
        "astId": 9181,
        "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
        "label": "requests",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_uint256,t_struct(VRFRequest)9090_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)100_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[100]",
        "numberOfBytes": "3200"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)99_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[99]",
        "numberOfBytes": "3168"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IKernel)13380": {
        "encoding": "inplace",
        "label": "contract IKernel",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)11805": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(Attributes)9083_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ERC721Properties.Attributes)",
        "numberOfBytes": "32",
        "value": "t_struct(Attributes)9083_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(VRFRequest)9090_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721Properties.VRFRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(VRFRequest)9090_storage"
      },
      "t_mapping(t_uint32,t_struct(Properties)9077_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ERC721Properties.Properties)",
        "numberOfBytes": "32",
        "value": "t_struct(Properties)9077_storage"
      },
      "t_mapping(t_userDefinedValueType(KeyHash)9059,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(KeyHash)9059",
        "label": "mapping(ERC721Properties.KeyHash => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_userDefinedValueType(KeyHash)9059,t_mapping(t_bytes32,t_struct(Attributes)9083_storage))": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(KeyHash)9059",
        "label": "mapping(ERC721Properties.KeyHash => mapping(bytes32 => struct ERC721Properties.Attributes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Attributes)9083_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attributes)9083_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Properties.Attributes",
        "members": [
          {
            "astId": 9082,
            "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
            "label": "attributes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_userDefinedValueType(KeyHash)9059,t_bytes32)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Properties)9077_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Properties.Properties",
        "members": [
          {
            "astId": 9076,
            "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
            "label": "properties",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_userDefinedValueType(KeyHash)9059,t_bytes32)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VRFRequest)9090_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Properties.VRFRequest",
        "members": [
          {
            "astId": 9085,
            "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
            "label": "to",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9087,
            "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
            "label": "tierValue",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9089,
            "contract": "contracts/apps/ERC721Properties/ERC721Properties.sol:ERC721Properties",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(KeyHash)9059": {
        "encoding": "inplace",
        "label": "ERC721Properties.KeyHash",
        "numberOfBytes": "32"
      }
    }
  }
}