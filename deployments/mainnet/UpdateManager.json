{
  "address": "0x17264AA33Bf7a7ECd708ABA4649C5ff1FD760a35",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "BeaconUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "app",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAppCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "code",
          "type": "address"
        }
      ],
      "name": "Upgrade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__semver",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "beacons",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "name": "deployBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "deployBeaconById",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "ids",
          "type": "bytes32[]"
        }
      ],
      "name": "deployBeaconByIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "app",
          "type": "bytes32"
        }
      ],
      "name": "getAppCodeHistory",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "app",
          "type": "bytes32"
        }
      ],
      "name": "getLastAppCode",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kernel",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc721OpenSale",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc721WhitelistSale",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "app",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "code",
          "type": "address"
        }
      ],
      "name": "setAppCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "setBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "name": "updateBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appCode",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98f1cc22970d89dcb2f392cef4bc3e2e0d57270a1a4c3389b363851d75eca551",
  "receipt": {
    "to": null,
    "from": "0x22bdc4AA7204f59d78d38d82729bE76CA4e6E4Df",
    "contractAddress": "0x17264AA33Bf7a7ECd708ABA4649C5ff1FD760a35",
    "transactionIndex": 18,
    "gasUsed": "1471861",
    "logsBloom": "0x
    "blockHash": "0x51f0b3763e7797b2a5558e0f6729f50a9fc56ca01de31eddc27712ab50a44f04",
    "transactionHash": "0x98f1cc22970d89dcb2f392cef4bc3e2e0d57270a1a4c3389b363851d75eca551",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 34771172,
        "transactionHash": "0x98f1cc22970d89dcb2f392cef4bc3e2e0d57270a1a4c3389b363851d75eca551",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000022bdc4aa7204f59d78d38d82729be76ca4e6e4df",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000116a00c8c125e19000000000000000000000000000000000000000000000003becda66a26b637bb0000000000000000000000000000000000000000000191aea6b8686aae0d222d000000000000000000000000000000000000000000000003bdb7065d9aa3d9a20000000000000000000000000000000000000000000191aea7cf08773a1f8046",
        "logIndex": 65,
        "blockHash": "0x51f0b3763e7797b2a5558e0f6729f50a9fc56ca01de31eddc27712ab50a44f04"
      }
    ],
    "blockNumber": 34771172,
    "cumulativeGasUsed": "3704671",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "341c9f0e9410711860e07934fbb5f71b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"BeaconUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"app\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAppCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__semver\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"beacons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"deployBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"deployBeaconById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"name\":\"deployBeaconByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"app\",\"type\":\"bytes32\"}],\"name\":\"getAppCodeHistory\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"app\",\"type\":\"bytes32\"}],\"name\":\"getLastAppCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kernel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721OpenSale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721WhitelistSale\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"app\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"setAppCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"setBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"updateBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appCode\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/updateManager/UpdateManager.sol\":\"UpdateManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/apps/UpgradeableApp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UpgradeableApp\\r\\n * @notice Defines the basic implementation slot fo.\\r\\n *\\r\\n **/\\r\\ncontract UpgradeableApp {\\r\\n    bytes32 private constant _IMPLEMENTATION_SLOT =\\r\\n        bytes32(uint256(keccak256(\\\"co.superdao.app.proxy.implementation\\\")) - 1);\\r\\n\\r\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    uint256[100] private __gap;\\r\\n\\r\\n    // @dev Finds value for Implementation Slot\\r\\n    function _getImplementationSlot() internal pure returns (StorageSlot.AddressSlot storage) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT);\\r\\n    }\\r\\n\\r\\n    function _getBeaconSlot() internal pure returns (StorageSlot.AddressSlot storage) {\\r\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x58c48d2c039198304a5f7cb435f4b1572fbc230ece8d8d97edc34a78fa285417\",\"license\":\"UNLICENSED\"},\"contracts/libraries/AppsIds.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary AppsIds {\\r\\n    bytes32 constant KERNEL = keccak256(abi.encodePacked(\\\"KERNEL\\\"));\\r\\n    bytes32 constant SUDO = keccak256(abi.encodePacked(\\\"SUDO\\\"));\\r\\n    bytes32 constant ERC721 = keccak256(abi.encodePacked(\\\"ERC721\\\"));\\r\\n    bytes32 constant ADMIN_CONTROLLER = keccak256(abi.encodePacked(\\\"ADMIN\\\")); //TODO: renamde admin to ADMIN_CONTROLLER\\r\\n    bytes32 constant ERC721_OPEN_SALE = keccak256(abi.encodePacked(\\\"ERC721_OPEN_SALE\\\"));\\r\\n    bytes32 constant ERC721_WHITELIST_SALE = keccak256(abi.encodePacked(\\\"ERC721_WHITELIST_SALE\\\"));\\r\\n    bytes32 constant TREASURY = keccak256(\\\"WALLET\\\"); //TODO: rename wallet to TREASURY\\r\\n    bytes32 constant RELEASE_MANAGER = keccak256(abi.encodePacked(\\\"RELEASE_MANAGER\\\"));\\r\\n}\\r\\n\",\"keccak256\":\"0x7d23bf4864a1d067a997fd2a020f0582674c81381fe6f9e1fc111a8299bf7a3d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Exceptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary Exceptions {\\r\\n    string constant INVALID_INITIALIZATION_ERROR = \\\"INITIALIZATION\\\";\\r\\n    string constant INVALID_AUTHORIZATION_ERROR = \\\"AUTHORIZATION\\\";\\r\\n    string constant INVARIANT_ERROR = \\\"INVARIANT\\\";\\r\\n    string constant VALIDATION_ERROR = \\\"VALIDATION\\\";\\r\\n    string constant UNAVAILABLE_ERROR = \\\"UNAVAILABLE\\\";\\r\\n    string constant NOT_ACTIVE_ERROR = \\\"NOT_ACTIVE\\\";\\r\\n    string constant NO_TREASURY_ADDRESS = \\\"NO_TREASURY_ADDRESS\\\";\\r\\n    string constant APP_WAS_INITED_ERROR = \\\"APP_WAS_INITED\\\";\\r\\n    string constant ILLEGAL_ADDRESS = \\\"ADDRESS_ASSOCIATES_WITH_APP\\\";\\r\\n    string constant BUY_LIMIT_ERROR = \\\"BUY_LIMIT_ERROR\\\";\\r\\n    string constant NULL_TOKEN_ADDRESS = \\\"NULL_TOKEN_ADDRESS\\\";\\r\\n    string constant UNSUPPORTED_TOKEN_ADDRESS = \\\"UNSUPPORTED_TOKEN_ADDRESS\\\";\\r\\n    string constant NOT_FOUND_PRICE_FOR_TIER = \\\"NOT_FOUND_PRICE_FOR_TIER\\\";\\r\\n    string constant INSUFFICIENT_AMOUNTS_OF_FUNDS = \\\"INSUFFICIENT_AMOUNTS_OF_FUNDS\\\";\\r\\n    string constant INSUFFICIENT_ALLOWANCE = \\\"INSUFFICIENT_ALLOWANCE\\\";\\r\\n    string constant BASIC_TOKEN_ADDRESS_NOT_SET = \\\"BASIC_TOKEN_ADDRESS_NOT_SET\\\";\\r\\n    string constant LIQUIDITY_POOL_NOT_FOUND = \\\"LIQUIDITY_POOL_NOT_FOUND\\\";\\r\\n    string constant ADDRESS_IS_NOT_CONTRACT = \\\"ADDRESS_IS_NOT_CONTRACT\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0xf1d1c7f5e4a86331e2b64c263a6aab287dfa44cba40540a87204244ed8e99d8d\",\"license\":\"MIT\"},\"contracts/libraries/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nabstract contract __with_semver {\\n    uint8 private immutable __semver_major;\\n    uint8 private immutable __semver_minor;\\n    uint8 private immutable __semver_patch;\\n\\n    constructor(\\n        uint8 _major,\\n        uint8 _minor,\\n        uint8 _patch\\n    ) {\\n        __semver_major = _major;\\n        __semver_minor = _minor;\\n        __semver_patch = _patch;\\n    }\\n\\n    function __semver() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"v\\\",\\n                    uint8(0x30) + __semver_major,\\n                    \\\".\\\",\\n                    uint8(0x30) + __semver_minor,\\n                    \\\".\\\",\\n                    uint8(0x30) + __semver_patch\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x393fd2cd95660e9c0539e5fe740cd83167522ba53402b785a77684dd3892eb03\",\"license\":\"MIT\"},\"contracts/updateManager/IUpdateManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IUpdateManager {\\r\\n    function upgrade(address appCode) external;\\r\\n\\r\\n    function setAppCode(bytes32 app, address code) external;\\r\\n\\r\\n    function getLastAppCode(bytes32 app) external view returns (address);\\r\\n\\r\\n    function getAppCodeHistory(bytes32 app) external view returns (address[] memory);\\r\\n\\r\\n    function getBeacon(bytes32 app) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x18a889db0ef6ca581a88ad64d10c203214453cfa9cc621b6206c27fdd2b2b94b\",\"license\":\"UNLICENSED\"},\"contracts/updateManager/UpdateManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./IUpdateManager.sol\\\";\\r\\nimport \\\"../apps/UpgradeableApp.sol\\\";\\r\\nimport \\\"../libraries/Exceptions.sol\\\";\\r\\nimport \\\"../libraries/AppsIds.sol\\\";\\r\\nimport \\\"../libraries/Semver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\r\\n\\r\\ncontract UpdateManager is\\r\\n    UpgradeableApp,\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    IUpdateManager,\\r\\n    __with_semver(uint8(1), uint8(1), uint8(0))\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _appsCode;\\r\\n    mapping(bytes32 => address) public beacons;\\r\\n    uint256[98] private __gap;\\r\\n\\r\\n    event SetAppCode(bytes32 app, address admin);\\r\\n    event Upgrade(address code);\\r\\n    event BeaconSet(bytes32 indexed id, address indexed beacon);\\r\\n    event BeaconDeployed(bytes32 indexed id, address indexed implementation, address indexed beacon);\\r\\n    event BeaconUpdated(bytes32 indexed id, address indexed implementation);\\r\\n\\r\\n    function initialize(\\r\\n        address kernel,\\r\\n        address admin,\\r\\n        address erc721,\\r\\n        address erc721OpenSale,\\r\\n        address erc721WhitelistSale\\r\\n    ) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        _setAppCode(AppsIds.KERNEL, kernel);\\r\\n        _setAppCode(AppsIds.ADMIN_CONTROLLER, admin);\\r\\n        _setAppCode(AppsIds.ERC721, erc721);\\r\\n        _setAppCode(AppsIds.ERC721_OPEN_SALE, erc721OpenSale);\\r\\n        _setAppCode(AppsIds.ERC721_WHITELIST_SALE, erc721WhitelistSale);\\r\\n    }\\r\\n\\r\\n    function upgrade(address appCode) external onlyOwner {\\r\\n        _getImplementationSlot().value = appCode;\\r\\n\\r\\n        emit Upgrade(appCode);\\r\\n    }\\r\\n\\r\\n    function implementation() external view returns (address) {\\r\\n        return _getImplementationSlot().value;\\r\\n    }\\r\\n\\r\\n    function setAppCode(bytes32 app, address code) external onlyOwner {\\r\\n        _setAppCode(app, code);\\r\\n    }\\r\\n\\r\\n    function getLastAppCode(bytes32 app) external view returns (address) {\\r\\n        return _appsCode[app].at(_appsCode[app].length() - 1);\\r\\n    }\\r\\n\\r\\n    function getAppCodeHistory(bytes32 app) external view returns (address[] memory) {\\r\\n        return _appsCode[app].values();\\r\\n    }\\r\\n\\r\\n    function _setAppCode(bytes32 app, address code) internal {\\r\\n        require(_appsCode[app].add(code), Exceptions.INVARIANT_ERROR);\\r\\n\\r\\n        emit SetAppCode(app, code);\\r\\n    }\\r\\n\\r\\n    function getBeacon(bytes32 id) public view returns (address) {\\r\\n        return beacons[id];\\r\\n    }\\r\\n\\r\\n    function getImplementation(bytes32 id) external view returns (address) {\\r\\n        return UpgradeableBeacon(beacons[id]).implementation();\\r\\n    }\\r\\n\\r\\n    function setBeacon(bytes32 id, address beacon) external onlyOwner {\\r\\n        _setBeacon(id, beacon);\\r\\n    }\\r\\n\\r\\n    function _setBeacon(bytes32 id, address beacon) private {\\r\\n        require(beacon.isContract(), Exceptions.ADDRESS_IS_NOT_CONTRACT);\\r\\n        beacons[id] = beacon;\\r\\n\\r\\n        emit BeaconSet(id, beacon);\\r\\n    }\\r\\n\\r\\n    function deployBeaconByIds(bytes32[] calldata ids) external onlyOwner {\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            deployBeaconById(ids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deployBeaconById(bytes32 id) public onlyOwner {\\r\\n        require(_appsCode[id].length() != 0, Exceptions.VALIDATION_ERROR);\\r\\n        address implementation_ = _appsCode[id].at(_appsCode[id].length() - 1);\\r\\n        deployBeacon(id, implementation_);\\r\\n    }\\r\\n\\r\\n    function deployBeacon(bytes32 id, address implementation_) public onlyOwner {\\r\\n        require(beacons[id] == address(0), Exceptions.VALIDATION_ERROR);\\r\\n        require(implementation_.isContract(), Exceptions.ADDRESS_IS_NOT_CONTRACT);\\r\\n\\r\\n        UpgradeableBeacon beacon = new UpgradeableBeacon(implementation_);\\r\\n        _setBeacon(id, address(beacon));\\r\\n\\r\\n        emit BeaconDeployed(id, implementation_, address(beacon));\\r\\n    }\\r\\n\\r\\n    function updateBeacon(bytes32 id, address implementation_) external onlyOwner {\\r\\n        require(beacons[id] != address(0), Exceptions.VALIDATION_ERROR);\\r\\n        require(implementation_.isContract(), Exceptions.ADDRESS_IS_NOT_CONTRACT);\\r\\n\\r\\n        UpgradeableBeacon(beacons[id]).upgradeTo(implementation_);\\r\\n\\r\\n        emit BeaconUpdated(id, implementation_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7de40ad470d4ffd217b4050ab3edb005b151b87a71b8e4523546c64be721123b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506001608081905260a052600060c05260805160a05160c0516119bb61004f60003960006108c3015260006108960152600061086901526119bb6000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063715018a611620000af578063b454578a116200007a578063b454578a1462000298578063ba11e6e614620002af578063c128a8a914620002c6578063f2fde38b14620002dd578063f49d4f6914620002f457600080fd5b8063715018a6146200023d5780637effd8a714620002475780638da5cb5b14620002605780639499138e146200027257600080fd5b806345cc597411620000fc57806345cc597414620001ad5780634828da8514620001c457806351db225e14620001f05780635c60da1b146200021c5780635e4a8a20146200022657600080fd5b80630900f01014620001325780631459457a146200014b5780633c12804514620001625780633c2e08281462000179575b600080fd5b6200014962000143366004620010d8565b6200030b565b005b620001496200015c366004620010f8565b6200039e565b620001496200017336600462001174565b62000549565b620001906200018a366004620011a7565b620006d6565b6040516001600160a01b0390911681526020015b60405180910390f35b62000149620001be366004620011c1565b62000755565b62000190620001d5366004620011a7565b600090815260ca60205260409020546001600160a01b031690565b6200019062000201366004620011a7565b60ca602052600090815260409020546001600160a01b031681565b62000190620007ce565b620001496200023736600462001174565b620007e9565b6200014962000826565b6200025162000861565b604051620001a491906200123b565b6097546001600160a01b031662000190565b6200028962000283366004620011a7565b62000949565b604051620001a4919062001293565b62000149620002a936600462001174565b62000965565b62000190620002c0366004620011a7565b62000ade565b62000149620002d736600462001174565b62000b20565b62000149620002ee366004620010d8565b62000b59565b6200014962000305366004620011a7565b62000bfb565b6097546001600160a01b03163314620003415760405162461bcd60e51b81526004016200033890620012e2565b60405180910390fd5b806200034c62000cb3565b80546001600160a01b0319166001600160a01b0392831617905560405190821681527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d9060200160405180910390a150565b6000620003ac600162000cee565b90508015620003c5576064805461ff0019166101001790555b620003cf62000d80565b6040516512d15493915360d21b60208201526200040690602601604051602081830303815290604052805190602001208762000db4565b6040516420a226a4a760d91b60208201526200043c90602501604051602081830303815290604052805190602001208662000db4565b6040516545524337323160d01b60208201526200047390602601604051602081830303815290604052805190602001208562000db4565b6040516f4552433732315f4f50454e5f53414c4560801b6020820152620004b490603001604051602081830303815290604052805190602001208462000db4565b604051744552433732315f57484954454c4953545f53414c4560581b6020820152620004fa90603501604051602081830303815290604052805190602001208362000db4565b801562000541576064805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6097546001600160a01b03163314620005765760405162461bcd60e51b81526004016200033890620012e2565b600082815260ca6020908152604091829020548251808401909352600a8352692b20a624a220aa24a7a760b11b918301919091526001600160a01b0316620005d35760405162461bcd60e51b81526004016200033891906200123b565b50604080518082019091526017815276105111149154d4d7d254d7d393d517d0d3d395149050d5604a1b60208201526001600160a01b0382163b6200062d5760405162461bcd60e51b81526004016200033891906200123b565b50600082815260ca602052604090819020549051631b2ce7f360e11b81526001600160a01b03838116600483015290911690633659cfe690602401600060405180830381600087803b1580156200068357600080fd5b505af115801562000698573d6000803e3d6000fd5b50506040516001600160a01b03841692508491507f1d24350dad3612e186d7f8b12d49e434fb62c5de2a5d6a164a132e651bf3427790600090a35050565b600081815260ca60209081526040808320548151635c60da1b60e01b815291516001600160a01b0390911692635c60da1b92600480820193918290030181865afa15801562000729573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200074f919062001317565b92915050565b6097546001600160a01b03163314620007825760405162461bcd60e51b81526004016200033890620012e2565b60005b81811015620007c957620007b4838383818110620007a757620007a762001337565b9050602002013562000bfb565b80620007c08162001363565b91505062000785565b505050565b6000620007da62000cb3565b546001600160a01b0316919050565b6097546001600160a01b03163314620008165760405162461bcd60e51b81526004016200033890620012e2565b62000822828262000db4565b5050565b6097546001600160a01b03163314620008535760405162461bcd60e51b81526004016200033890620012e2565b6200085f600062000e57565b565b6060620008907f0000000000000000000000000000000000000000000000000000000000000000603062001381565b620008bd7f0000000000000000000000000000000000000000000000000000000000000000603062001381565b620008ea7f0000000000000000000000000000000000000000000000000000000000000000603062001381565b604051603b60f91b60208201526001600160f81b031960f894851b81166021830152601760f91b6022830181905293851b811660238301526024820193909352921b166025820152602601604051602081830303815290604052905090565b600081815260c9602052604090206060906200074f9062000ea9565b6097546001600160a01b03163314620009925760405162461bcd60e51b81526004016200033890620012e2565b600082815260ca6020908152604091829020548251808401909352600a8352692b20a624a220aa24a7a760b11b918301919091526001600160a01b031615620009f05760405162461bcd60e51b81526004016200033891906200123b565b50604080518082019091526017815276105111149154d4d7d254d7d393d517d0d3d395149050d5604a1b60208201526001600160a01b0382163b62000a4a5760405162461bcd60e51b81526004016200033891906200123b565b5060008160405162000a5c90620010b4565b6001600160a01b039091168152602001604051809103906000f08015801562000a89573d6000803e3d6000fd5b50905062000a98838262000ebf565b806001600160a01b0316826001600160a01b0316847f0bd3a149da1e19a8f71291194528cd2b9c829e49ba3b49b79113ac5172a0711a60405160405180910390a4505050565b600081815260c9602052604081206200074f9060019062000aff9062000f72565b62000b0b9190620013a9565b600084815260c9602052604090209062000f7d565b6097546001600160a01b0316331462000b4d5760405162461bcd60e51b81526004016200033890620012e2565b62000822828262000ebf565b6097546001600160a01b0316331462000b865760405162461bcd60e51b81526004016200033890620012e2565b6001600160a01b03811662000bed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000338565b62000bf88162000e57565b50565b6097546001600160a01b0316331462000c285760405162461bcd60e51b81526004016200033890620012e2565b600081815260c96020526040902062000c419062000f72565b60408051808201909152600a8152692b20a624a220aa24a7a760b11b60208201529062000c835760405162461bcd60e51b81526004016200033891906200123b565b50600081815260c96020526040812062000ca59060019062000aff9062000f72565b905062000822828262000965565b600062000ce962000ce660017f797d7c7d0df25d67e029b044c5bcb2b89d68f6483382b5f85e64485950ed88d1620013a9565b90565b905090565b606454600090610100900460ff161562000d3c578160ff16600114801562000d155750303b155b62000d345760405162461bcd60e51b81526004016200033890620013c3565b506000919050565b60645460ff80841691161062000d665760405162461bcd60e51b81526004016200033890620013c3565b506064805460ff191660ff92909216919091179055600190565b606454610100900460ff1662000daa5760405162461bcd60e51b8152600401620003389062001411565b6200085f62000f8b565b600082815260c96020526040902062000dce908262000fc0565b6040518060400160405280600981526020016812539590549250539560ba1b8152509062000e115760405162461bcd60e51b81526004016200033891906200123b565b50604080518381526001600160a01b03831660208201527f7536c7703d321558d15a6f344db59e1721430eeb9885a88b380f91b70bb0b4ee910160405180910390a15050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060600062000eb88362000fd7565b9392505050565b604080518082019091526017815276105111149154d4d7d254d7d393d517d0d3d395149050d5604a1b60208201526001600160a01b0382163b62000f185760405162461bcd60e51b81526004016200033891906200123b565b50600082815260ca602052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917f3ed57857612363895e72cf7336c104d8e2d56d039697bb0d2f59b83a8df6b6759190a35050565b60006200074f825490565b600062000eb8838362001035565b606454610100900460ff1662000fb55760405162461bcd60e51b8152600401620003389062001411565b6200085f3362000e57565b600062000eb8836001600160a01b03841662001062565b6060816000018054806020026020016040519081016040528092919081815260200182805480156200102957602002820191906000526020600020905b81548152602001906001019080831162001014575b50505050509050919050565b60008260000182815481106200104f576200104f62001337565b9060005260206000200154905092915050565b6000818152600183016020526040812054620010ab575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200074f565b5060006200074f565b610529806200145d83390190565b6001600160a01b038116811462000bf857600080fd5b600060208284031215620010eb57600080fd5b813562000eb881620010c2565b600080600080600060a086880312156200111157600080fd5b85356200111e81620010c2565b945060208601356200113081620010c2565b935060408601356200114281620010c2565b925060608601356200115481620010c2565b915060808601356200116681620010c2565b809150509295509295909350565b600080604083850312156200118857600080fd5b8235915060208301356200119c81620010c2565b809150509250929050565b600060208284031215620011ba57600080fd5b5035919050565b60008060208385031215620011d557600080fd5b823567ffffffffffffffff80821115620011ee57600080fd5b818501915085601f8301126200120357600080fd5b8135818111156200121357600080fd5b8660208260051b85010111156200122957600080fd5b60209290920196919550909350505050565b600060208083528351808285015260005b818110156200126a578581018301518582016040015282016200124c565b818111156200127d576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252825182820181905260009190848201906040850190845b81811015620012d65783516001600160a01b031683529284019291840191600101620012af565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156200132a57600080fd5b815162000eb881620010c2565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200137a576200137a6200134d565b5060010190565b600060ff821660ff84168060ff03821115620013a157620013a16200134d565b019392505050565b600082821015620013be57620013be6200134d565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe608060405234801561001057600080fd5b5060405161052938038061052983398101604081905261002f91610151565b61003833610047565b61004181610097565b50610181565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b61020a1760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006020828403121561016357600080fd5b81516001600160a01b038116811461017a57600080fd5b9392505050565b610399806101906000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102fe565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f610139565b6000546001600160a01b031661007e565b61006f6100c13660046102fe565b61016f565b6000546001600160a01b031633146100f95760405162461bcd60e51b81526004016100f09061032e565b60405180910390fd5b61010281610219565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101635760405162461bcd60e51b81526004016100f09061032e565b61016d60006102ae565b565b6000546001600160a01b031633146101995760405162461bcd60e51b81526004016100f09061032e565b6001600160a01b0381166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f0565b610207816102ae565b50565b6001600160a01b03163b151590565b6001600160a01b0381163b61028c5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b60648201526084016100f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561031057600080fd5b81356001600160a01b038116811461032757600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122071eddbfd71a7c8e7b1008717bca148b532acd07224b658ba1835eef49ba8cb6964736f6c634300080c0033a264697066735822122075af7af4aea4dd76917040ab647d3fabb1cffab474c4b920370e878c2a3242ad64736f6c634300080c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063715018a611620000af578063b454578a116200007a578063b454578a1462000298578063ba11e6e614620002af578063c128a8a914620002c6578063f2fde38b14620002dd578063f49d4f6914620002f457600080fd5b8063715018a6146200023d5780637effd8a714620002475780638da5cb5b14620002605780639499138e146200027257600080fd5b806345cc597411620000fc57806345cc597414620001ad5780634828da8514620001c457806351db225e14620001f05780635c60da1b146200021c5780635e4a8a20146200022657600080fd5b80630900f01014620001325780631459457a146200014b5780633c12804514620001625780633c2e08281462000179575b600080fd5b6200014962000143366004620010d8565b6200030b565b005b620001496200015c366004620010f8565b6200039e565b620001496200017336600462001174565b62000549565b620001906200018a366004620011a7565b620006d6565b6040516001600160a01b0390911681526020015b60405180910390f35b62000149620001be366004620011c1565b62000755565b62000190620001d5366004620011a7565b600090815260ca60205260409020546001600160a01b031690565b6200019062000201366004620011a7565b60ca602052600090815260409020546001600160a01b031681565b62000190620007ce565b620001496200023736600462001174565b620007e9565b6200014962000826565b6200025162000861565b604051620001a491906200123b565b6097546001600160a01b031662000190565b6200028962000283366004620011a7565b62000949565b604051620001a4919062001293565b62000149620002a936600462001174565b62000965565b62000190620002c0366004620011a7565b62000ade565b62000149620002d736600462001174565b62000b20565b62000149620002ee366004620010d8565b62000b59565b6200014962000305366004620011a7565b62000bfb565b6097546001600160a01b03163314620003415760405162461bcd60e51b81526004016200033890620012e2565b60405180910390fd5b806200034c62000cb3565b80546001600160a01b0319166001600160a01b0392831617905560405190821681527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d9060200160405180910390a150565b6000620003ac600162000cee565b90508015620003c5576064805461ff0019166101001790555b620003cf62000d80565b6040516512d15493915360d21b60208201526200040690602601604051602081830303815290604052805190602001208762000db4565b6040516420a226a4a760d91b60208201526200043c90602501604051602081830303815290604052805190602001208662000db4565b6040516545524337323160d01b60208201526200047390602601604051602081830303815290604052805190602001208562000db4565b6040516f4552433732315f4f50454e5f53414c4560801b6020820152620004b490603001604051602081830303815290604052805190602001208462000db4565b604051744552433732315f57484954454c4953545f53414c4560581b6020820152620004fa90603501604051602081830303815290604052805190602001208362000db4565b801562000541576064805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6097546001600160a01b03163314620005765760405162461bcd60e51b81526004016200033890620012e2565b600082815260ca6020908152604091829020548251808401909352600a8352692b20a624a220aa24a7a760b11b918301919091526001600160a01b0316620005d35760405162461bcd60e51b81526004016200033891906200123b565b50604080518082019091526017815276105111149154d4d7d254d7d393d517d0d3d395149050d5604a1b60208201526001600160a01b0382163b6200062d5760405162461bcd60e51b81526004016200033891906200123b565b50600082815260ca602052604090819020549051631b2ce7f360e11b81526001600160a01b03838116600483015290911690633659cfe690602401600060405180830381600087803b1580156200068357600080fd5b505af115801562000698573d6000803e3d6000fd5b50506040516001600160a01b03841692508491507f1d24350dad3612e186d7f8b12d49e434fb62c5de2a5d6a164a132e651bf3427790600090a35050565b600081815260ca60209081526040808320548151635c60da1b60e01b815291516001600160a01b0390911692635c60da1b92600480820193918290030181865afa15801562000729573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200074f919062001317565b92915050565b6097546001600160a01b03163314620007825760405162461bcd60e51b81526004016200033890620012e2565b60005b81811015620007c957620007b4838383818110620007a757620007a762001337565b9050602002013562000bfb565b80620007c08162001363565b91505062000785565b505050565b6000620007da62000cb3565b546001600160a01b0316919050565b6097546001600160a01b03163314620008165760405162461bcd60e51b81526004016200033890620012e2565b62000822828262000db4565b5050565b6097546001600160a01b03163314620008535760405162461bcd60e51b81526004016200033890620012e2565b6200085f600062000e57565b565b6060620008907f0000000000000000000000000000000000000000000000000000000000000000603062001381565b620008bd7f0000000000000000000000000000000000000000000000000000000000000000603062001381565b620008ea7f0000000000000000000000000000000000000000000000000000000000000000603062001381565b604051603b60f91b60208201526001600160f81b031960f894851b81166021830152601760f91b6022830181905293851b811660238301526024820193909352921b166025820152602601604051602081830303815290604052905090565b600081815260c9602052604090206060906200074f9062000ea9565b6097546001600160a01b03163314620009925760405162461bcd60e51b81526004016200033890620012e2565b600082815260ca6020908152604091829020548251808401909352600a8352692b20a624a220aa24a7a760b11b918301919091526001600160a01b031615620009f05760405162461bcd60e51b81526004016200033891906200123b565b50604080518082019091526017815276105111149154d4d7d254d7d393d517d0d3d395149050d5604a1b60208201526001600160a01b0382163b62000a4a5760405162461bcd60e51b81526004016200033891906200123b565b5060008160405162000a5c90620010b4565b6001600160a01b039091168152602001604051809103906000f08015801562000a89573d6000803e3d6000fd5b50905062000a98838262000ebf565b806001600160a01b0316826001600160a01b0316847f0bd3a149da1e19a8f71291194528cd2b9c829e49ba3b49b79113ac5172a0711a60405160405180910390a4505050565b600081815260c9602052604081206200074f9060019062000aff9062000f72565b62000b0b9190620013a9565b600084815260c9602052604090209062000f7d565b6097546001600160a01b0316331462000b4d5760405162461bcd60e51b81526004016200033890620012e2565b62000822828262000ebf565b6097546001600160a01b0316331462000b865760405162461bcd60e51b81526004016200033890620012e2565b6001600160a01b03811662000bed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000338565b62000bf88162000e57565b50565b6097546001600160a01b0316331462000c285760405162461bcd60e51b81526004016200033890620012e2565b600081815260c96020526040902062000c419062000f72565b60408051808201909152600a8152692b20a624a220aa24a7a760b11b60208201529062000c835760405162461bcd60e51b81526004016200033891906200123b565b50600081815260c96020526040812062000ca59060019062000aff9062000f72565b905062000822828262000965565b600062000ce962000ce660017f797d7c7d0df25d67e029b044c5bcb2b89d68f6483382b5f85e64485950ed88d1620013a9565b90565b905090565b606454600090610100900460ff161562000d3c578160ff16600114801562000d155750303b155b62000d345760405162461bcd60e51b81526004016200033890620013c3565b506000919050565b60645460ff80841691161062000d665760405162461bcd60e51b81526004016200033890620013c3565b506064805460ff191660ff92909216919091179055600190565b606454610100900460ff1662000daa5760405162461bcd60e51b8152600401620003389062001411565b6200085f62000f8b565b600082815260c96020526040902062000dce908262000fc0565b6040518060400160405280600981526020016812539590549250539560ba1b8152509062000e115760405162461bcd60e51b81526004016200033891906200123b565b50604080518381526001600160a01b03831660208201527f7536c7703d321558d15a6f344db59e1721430eeb9885a88b380f91b70bb0b4ee910160405180910390a15050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060600062000eb88362000fd7565b9392505050565b604080518082019091526017815276105111149154d4d7d254d7d393d517d0d3d395149050d5604a1b60208201526001600160a01b0382163b62000f185760405162461bcd60e51b81526004016200033891906200123b565b50600082815260ca602052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917f3ed57857612363895e72cf7336c104d8e2d56d039697bb0d2f59b83a8df6b6759190a35050565b60006200074f825490565b600062000eb8838362001035565b606454610100900460ff1662000fb55760405162461bcd60e51b8152600401620003389062001411565b6200085f3362000e57565b600062000eb8836001600160a01b03841662001062565b6060816000018054806020026020016040519081016040528092919081815260200182805480156200102957602002820191906000526020600020905b81548152602001906001019080831162001014575b50505050509050919050565b60008260000182815481106200104f576200104f62001337565b9060005260206000200154905092915050565b6000818152600183016020526040812054620010ab575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200074f565b5060006200074f565b610529806200145d83390190565b6001600160a01b038116811462000bf857600080fd5b600060208284031215620010eb57600080fd5b813562000eb881620010c2565b600080600080600060a086880312156200111157600080fd5b85356200111e81620010c2565b945060208601356200113081620010c2565b935060408601356200114281620010c2565b925060608601356200115481620010c2565b915060808601356200116681620010c2565b809150509295509295909350565b600080604083850312156200118857600080fd5b8235915060208301356200119c81620010c2565b809150509250929050565b600060208284031215620011ba57600080fd5b5035919050565b60008060208385031215620011d557600080fd5b823567ffffffffffffffff80821115620011ee57600080fd5b818501915085601f8301126200120357600080fd5b8135818111156200121357600080fd5b8660208260051b85010111156200122957600080fd5b60209290920196919550909350505050565b600060208083528351808285015260005b818110156200126a578581018301518582016040015282016200124c565b818111156200127d576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252825182820181905260009190848201906040850190845b81811015620012d65783516001600160a01b031683529284019291840191600101620012af565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156200132a57600080fd5b815162000eb881620010c2565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200137a576200137a6200134d565b5060010190565b600060ff821660ff84168060ff03821115620013a157620013a16200134d565b019392505050565b600082821015620013be57620013be6200134d565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe608060405234801561001057600080fd5b5060405161052938038061052983398101604081905261002f91610151565b61003833610047565b61004181610097565b50610181565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b61020a1760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006020828403121561016357600080fd5b81516001600160a01b038116811461017a57600080fd5b9392505050565b610399806101906000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102fe565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f610139565b6000546001600160a01b031661007e565b61006f6100c13660046102fe565b61016f565b6000546001600160a01b031633146100f95760405162461bcd60e51b81526004016100f09061032e565b60405180910390fd5b61010281610219565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101635760405162461bcd60e51b81526004016100f09061032e565b61016d60006102ae565b565b6000546001600160a01b031633146101995760405162461bcd60e51b81526004016100f09061032e565b6001600160a01b0381166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f0565b610207816102ae565b50565b6001600160a01b03163b151590565b6001600160a01b0381163b61028c5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b60648201526084016100f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561031057600080fd5b81356001600160a01b038116811461032757600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122071eddbfd71a7c8e7b1008717bca148b532acd07224b658ba1835eef49ba8cb6964736f6c634300080c0033a264697066735822122075af7af4aea4dd76917040ab647d3fabb1cffab474c4b920370e878c2a3242ad64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11829,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)100_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "100",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "100",
        "type": "t_bool"
      },
      {
        "astId": 1601,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15941,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "_appsCode",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6483_storage)"
      },
      {
        "astId": 15945,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "beacons",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 15949,
        "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)98_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)100_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[100]",
        "numberOfBytes": "3200"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)98_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[98]",
        "numberOfBytes": "3136"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6483_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6483_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6483_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6482,
            "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6182_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6182_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6177,
            "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6181,
            "contract": "contracts/updateManager/UpdateManager.sol:UpdateManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}