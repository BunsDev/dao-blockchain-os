{
  "language": "Solidity",
  "sources": {
    "contracts/apps/AdminController/AdminController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../../libraries/Exceptions.sol\";\nimport \"../App.sol\";\nimport \"../ERC721Properties/ERC721Properties.sol\";\nimport \"../ERC721Sale/ERC721WhitelistSale.sol\";\nimport \"../ERC721Sale/ERC721OpenSale.sol\";\nimport {__with_semver} from \"../../libraries/Semver.sol\";\n\ncontract AdminController is App, __with_semver(uint8(1), uint8(0), uint8(0)) {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint8 public immutable SUDO = _initNextRole();\n\n    EnumerableSet.AddressSet private _adminAddresses;\n\n    uint256[99] private __gap;\n\n    event AddAdmin(address admin);\n    event RemoveAdmin(address admin);\n\n    modifier onlyAdmin() {\n        require(_isAdmin(_msgSender()), Exceptions.INVALID_AUTHORIZATION_ERROR);\n        _;\n    }\n\n    modifier onlyAdminOrSudo() {\n        require(_isAdmin(_msgSender()) || _hasPermission(SUDO), Exceptions.INVALID_AUTHORIZATION_ERROR);\n        _;\n    }\n\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function initialize(IKernel _kernel, address[] calldata admins) external initializer {\n        __App_init(_kernel);\n\n        for (uint256 i = 0; i < admins.length; i++) {\n            _adminAddresses.add(admins[i]);\n        }\n    }\n\n    function adminAddresses() external view returns (address[] memory) {\n        return _adminAddresses.values();\n    }\n\n    function isAdmin(address adminAddress) external view returns (bool) {\n        return _isAdmin(adminAddress);\n    }\n\n    function addAdmin(address adminAddress) external onlyAdminOrSudo {\n        require(_adminAddresses.add(adminAddress), Exceptions.INVARIANT_ERROR);\n\n        emit AddAdmin(adminAddress);\n    }\n\n    function removeAdmin(address adminAddress) external onlyAdminOrSudo {\n        require(_adminAddresses.remove(adminAddress), Exceptions.INVARIANT_ERROR);\n\n        emit RemoveAdmin(adminAddress);\n    }\n\n    function batchCall(address[] calldata addresses, bytes[] calldata data)\n        external\n        virtual\n        onlyAdminOrSudo\n        returns (bytes[] memory results)\n    {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionCall(addresses[i], data[i], Exceptions.INVALID_AUTHORIZATION_ERROR);\n        }\n        return results;\n    }\n\n    function mint(address to, bytes32 tierValue) external onlyAdminOrSudo {\n        ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).mint(to, tierValue);\n    }\n\n    function batchMint(address[] calldata to, bytes32[] calldata tierValues) external onlyAdminOrSudo {\n        for (uint256 i = 0; i < to.length; i++) {\n            ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).mint(to[i], tierValues[i]);\n        }\n    }\n\n    function burn(uint32 tokenId) external onlyAdminOrSudo {\n        ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).burn(tokenId);\n    }\n\n    function batchBurn(uint32[] calldata tokenIds) external onlyAdminOrSudo {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).burn(tokenIds[i]);\n        }\n    }\n\n    function setBaseURI(string calldata uri) external onlyAdminOrSudo {\n        ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).setBaseURI(uri);\n    }\n\n    function setRestrictBurnPolicy(bool burnPolicy) external onlyAdminOrSudo {\n        ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).setRestrictBurnPolicy(burnPolicy);\n    }\n\n    function openSale__setPaymentPolicy(bytes32[] calldata tierValues, uint256[] calldata tierPrices_)\n        external\n        onlyAdminOrSudo\n    {\n        ERC721OpenSale(kernel.getAppAddress(AppsIds.ERC721_OPEN_SALE)).setPaymentPolicy(tierValues, tierPrices_);\n    }\n\n    function whitelistSale__setPaymentPolicy(bytes32[] calldata tierValues, uint256[] calldata tierPrices_)\n        external\n        onlyAdminOrSudo\n    {\n        ERC721WhitelistSale(kernel.getAppAddress(AppsIds.ERC721_WHITELIST_SALE)).setPaymentPolicy(\n            tierValues,\n            tierPrices_\n        );\n    }\n\n    function whitelistSale__setMerkleTree(bytes32 merkleRoot, bytes calldata merkleProofIpfsHash)\n        external\n        onlyAdminOrSudo\n    {\n        ERC721WhitelistSale(kernel.getAppAddress(AppsIds.ERC721_WHITELIST_SALE)).setMerkleTree(\n            merkleRoot,\n            merkleProofIpfsHash\n        );\n    }\n\n    function _isAdmin(address adminAddress) private view returns (bool) {\n        return _adminAddresses.contains(adminAddress);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Exceptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary Exceptions {\n    string constant INVALID_INITIALIZATION_ERROR = \"INITIALIZATION\";\n    string constant INVALID_AUTHORIZATION_ERROR = \"AUTHORIZATION\";\n    string constant INVARIANT_ERROR = \"INVARIANT\";\n    string constant VALIDATION_ERROR = \"VALIDATION\";\n    string constant UNAVAILABLE_ERROR = \"UNAVAILABLE\";\n    string constant NOT_ACTIVE_ERROR = \"NOT_ACTIVE\";\n    string constant APP_WAS_INITED_ERROR = \"APP_WAS_INITED\";\n    string constant ILLEGAL_ADDRESS = \"ADDRESS_ASSOCIATES_WITH_APP\";\n}\n"
    },
    "contracts/apps/App.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"../kernel/interfaces/IKernel.sol\";\nimport \"../libraries/Exceptions.sol\";\nimport \"./UpgradeableApp.sol\";\n\nabstract contract App is UpgradeableApp, Initializable, ERC2771Context {\n    IKernel public kernel;\n    uint8 private _nextRoleId = 0;\n\n    uint256[99] private __gap;\n\n    event Init(IKernel kernel);\n    event Upgrade(address code);\n\n    modifier requirePermission(uint8 permissionId) {\n        require(_hasPermission(permissionId), Exceptions.INVALID_AUTHORIZATION_ERROR);\n        _;\n    }\n\n    modifier onlyKernel() {\n        require(_msgSender() == address(kernel), Exceptions.INVALID_AUTHORIZATION_ERROR);\n        _;\n    }\n\n    function upgrade(address appCode) external onlyKernel {\n        _getImplementationSlot().value = appCode;\n\n        emit Upgrade(appCode);\n    }\n\n    function implementation() external view returns (address) {\n        return _getImplementationSlot().value;\n    }\n\n    function __App_init(IKernel _kernel) internal onlyInitializing {\n        kernel = _kernel;\n\n        emit Init(kernel);\n    }\n\n    function _initNextRole() internal returns (uint8) {\n        assert(_nextRoleId < 15);\n\n        return _nextRoleId++;\n    }\n\n    function _hasPermission(uint8 permissionId) internal view returns (bool) {\n        return kernel.hasPermission(_msgSender(), address(this), permissionId);\n    }\n}\n"
    },
    "contracts/apps/ERC721Properties/ERC721Properties.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../App.sol\";\nimport \"../../libraries/Exceptions.sol\";\nimport \"../../libraries/Pseudorand.sol\";\nimport \"../../libraries/Semver.sol\";\n\ncontract ERC721Properties is ERC721Upgradeable, OwnableUpgradeable, App,\n__with_semver(\n    uint8(1),\n    uint8(0),\n    uint8(2)\n) {\n    using Strings for uint256;\n\n    type KeyHash is bytes32;\n\n    struct Initialization {\n        IKernel kernel;\n        address openseaOwner;\n        string baseURI;\n        string name;\n        string symbol;\n    }\n\n    struct Properties {\n        mapping(KeyHash => bytes32) properties;\n    }\n\n    struct Attributes {\n        mapping(KeyHash => bytes32) attributes;\n    }\n\n    uint8 public immutable CONTROLLER = _initNextRole();\n\n    string constant INVALID_TIER_AMOUNT_ERROR = \"INVALID_TIER_AMOUNT_ERROR\";\n\n    string constant PROPERTY_TIER = \"TIER\";\n    string constant PROPERTY_ARTWORK_ID = \"ARTWORK_ID\";\n\n    string constant ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM = \"TIER_EXTRA_ARTWORKS_NUM\";\n    string constant ATTRIBUTE_TIER_RANDOM_MINT = \"TIER_RANDOM_MINT\";\n    string constant ATTRIBUTE_TIER_RANDOM_SHUFFLE_MINT = \"TIER_RANDOM_SHUFFLE_MINT\";\n\n    string constant ATTRIBUTE_MAX_AMOUNT = \"MAX_AMOUNT\";\n    string constant ATTRIBUTE_TOTAL_AMOUNT = \"TOTAL_AMOUNT\";\n    string constant ATTRIBUTE_IS_TRANSFERABLE = \"IS_TRANSFERABLE\";\n    string constant ATTRIBUTE_UNLOCKS_AT_HOURS = \"TRANSFER_UNLOCKS_AT_HOURS\";\n    string constant BURN_POLICY_ERROR = \"BURN_POLICY_ERROR\";\n\n    string public baseURI;\n\n    bool private __0; // removed: isTransferable\n    uint32 private __1; // removed: transferUnlocksAtHours\n    uint32 internal _nextTokenId;\n\n    mapping(uint32 => Properties) internal _propertiesByTokenId;\n    mapping(KeyHash => mapping(bytes32 => Attributes)) internal _attributesByPropertyKey;\n\n    mapping(bytes32 => uint32[]) internal _randomShuffleUnusedArtworkIds;\n\n    string private _editableName;\n    string private _editableSymbol;\n    bool private _restrictBurnPolicy;\n\n    event SetAttribute(string propKey, bytes32 propValue, string attrKey, bytes32 attrValue);\n    event Mint(uint32 tokenId, string[] propKeys, bytes32[] propValues);\n    event Burn(uint32 tokenId);\n\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function _msgSender()\n        internal\n        view\n        override(ContextUpgradeable, ERC2771Context)\n        returns (address sender)\n    {\n        sender = ERC2771Context._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Context) returns (bytes calldata) {\n        return ERC2771Context._msgData();\n    }\n\n    function initialize(Initialization calldata init) external initializer {\n        _transferOwnership(init.openseaOwner);\n\n        __ERC721_init(init.name, init.symbol);\n        __App_init(init.kernel);\n\n        baseURI = init.baseURI;\n        _editableName = init.name;\n        _editableSymbol = init.symbol;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(abi.encodePacked(baseURI, \"contract\"));\n    }\n\n    function hasRandomMint(bytes32 tier) public view returns (bool) {\n        return _getAttribute(PROPERTY_TIER, tier, ATTRIBUTE_TIER_RANDOM_MINT) == bytes32(bytes1(0x01));\n    }\n\n    function hasRandomShuffleMint(bytes32 tier) public view returns (bool) {\n        return _getAttribute(PROPERTY_TIER, tier, ATTRIBUTE_TIER_RANDOM_SHUFFLE_MINT) == bytes32(bytes1(0x01));\n    }\n\n    function tierExtraArtworksNum(bytes32 tier) public view returns (uint256) {\n        return uint256(_getAttribute(PROPERTY_TIER, tier, ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM));\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        uint32 tokenIdU32 = uint32(tokenId);\n        bytes32 tier = _getPropertyValue(tokenIdU32, PROPERTY_TIER);\n        if (tierExtraArtworksNum(tier) != 0) {\n            uint256 artworkId = uint256(_getPropertyValue(tokenIdU32, PROPERTY_ARTWORK_ID));\n            return string(abi.encodePacked(baseURI, tier, \"/\", artworkId.toString()));\n        } else {\n            return string(abi.encodePacked(baseURI, tier));\n        }\n    }\n\n    function getAttribute(\n        string memory propKey,\n        bytes32 propValue,\n        string memory attrKey\n    ) external view returns (bytes32) {\n        return _getAttribute(propKey, propValue, attrKey);\n    }\n\n    function getPropertyValue(uint32 tokenId, string calldata key) external view returns (bytes32) {\n        return _getPropertyValue(tokenId, key);\n    }\n\n    function setBaseURI(string calldata uri) external requirePermission(CONTROLLER) {\n        baseURI = uri;\n    }\n\n    function setRestrictBurnPolicy(bool burnPolicy) external requirePermission(CONTROLLER) {\n        _restrictBurnPolicy = burnPolicy;\n    }\n\n    function getRestrictBurnPolicy() public view returns (bool) {\n        return _restrictBurnPolicy;\n    }\n\n    function setRandomShuffleMint(bytes32 tierValue, uint256 tokenCount) external requirePermission(CONTROLLER) {\n        require(tokenCount > 1); // otherwise it's a `one-of-many`\n        require(tokenCount <= 5000); // TODO: to avoid block gas limit; add iterative initialization in the future\n        require(!hasRandomMint(tierValue) && !hasRandomShuffleMint(tierValue)); // TODO: -1 SLOAD\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_RANDOM_SHUFFLE_MINT, bytes32(bytes1(0x01)));\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_MAX_AMOUNT, bytes32(tokenCount));\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM, bytes32(tokenCount - 1));\n        _randomShuffleUnusedArtworkIds[tierValue] = new uint32[](tokenCount);\n        uint32[] storage ids = _randomShuffleUnusedArtworkIds[tierValue];\n        for (uint256 i; i != tokenCount; ++i) {\n            ids[i] = uint32(i);\n        }\n    }\n\n    function setRandomMint(\n        bytes32 tierValue,\n        uint256 tokenCount,\n        uint256 artworksCount\n    ) external requirePermission(CONTROLLER) {\n        require(artworksCount > 1); // otherwise it's a `one-of-many`\n        require(artworksCount <= 5000); // TODO: to avoid block gas limit; add iterative initialization in the future\n        require(!hasRandomShuffleMint(tierValue) && !hasRandomMint(tierValue)); // TODO: -1 SLOAD\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_RANDOM_MINT, bytes32(bytes1(0x01)));\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_MAX_AMOUNT, bytes32(tokenCount));\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TIER_EXTRA_ARTWORKS_NUM, bytes32(artworksCount - 1));\n    }\n\n    function mint(address to, bytes32 tierValue) external requirePermission(CONTROLLER) {\n        // default max amount is 0 so the tier --must-- be set & configured\n        uint256 maxAmountByTier = uint256(_getAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_MAX_AMOUNT));\n        uint256 totalAmountByTier = uint256(_getAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT));\n        uint256 extraArtworksNumByTier = tierExtraArtworksNum(tierValue);\n        bool randomMintByTier = hasRandomMint(tierValue);\n        bool randomShuffleMintByTier = hasRandomShuffleMint(tierValue);\n\n        require(totalAmountByTier < maxAmountByTier, INVALID_TIER_AMOUNT_ERROR);\n\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT, bytes32(++totalAmountByTier));\n        _propertiesByTokenId[_nextTokenId].properties[_calculateKeyHash(PROPERTY_TIER)] = tierValue;\n\n        uint32 tokenId = _nextTokenId;\n        _nextTokenId++;\n\n        _mint(to, tokenId);\n\n        bytes32 artworkIdPropValue;\n        if (randomMintByTier) {\n            uint256 artworkId = Pseudorand.pseudorand(abi.encodePacked(to));\n            artworkIdPropValue = bytes32(artworkId % (extraArtworksNumByTier + 1));\n        } else if (randomShuffleMintByTier) {\n            // Knuth random shuffle\n            uint32[] storage ids = _randomShuffleUnusedArtworkIds[tierValue];\n            uint256 len = ids.length;\n            uint256 rnd = Pseudorand.pseudorand(abi.encodePacked(to));\n            uint256 ptr = ids[rnd % len];\n            uint256 val = ids[ptr];\n            (ids[ptr], ids[len - 1]) = (ids[len - 1], ids[ptr]);\n            delete ids[len - 1];\n            ids.pop();\n            artworkIdPropValue = bytes32(val);\n        }\n        _propertiesByTokenId[tokenId].properties[_calculateKeyHash(PROPERTY_ARTWORK_ID)] = artworkIdPropValue;\n\n        string[] memory propKeys = new string[](2);\n        bytes32[] memory propValues = new bytes32[](2);\n        propKeys[0] = PROPERTY_TIER;\n        propKeys[1] = PROPERTY_ARTWORK_ID;\n        propValues[0] = tierValue;\n        propValues[1] = artworkIdPropValue;\n\n        emit Mint(tokenId, propKeys, propValues);\n    }\n\n    function burn(uint32 tokenId) external requirePermission(CONTROLLER) {\n        _burn(tokenId);\n\n        KeyHash propertyTierKey = _calculateKeyHash(PROPERTY_TIER);\n        bytes32 tierValue = _propertiesByTokenId[tokenId].properties[propertyTierKey];\n        uint256 totalAmountByTier = uint256(_getAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT));\n        _setAttribute(PROPERTY_TIER, tierValue, ATTRIBUTE_TOTAL_AMOUNT, bytes32(--totalAmountByTier));\n\n        _propertiesByTokenId[tokenId].properties[propertyTierKey] = bytes32(0);\n        emit Burn(tokenId);\n    }\n\n    function setAttribute(\n        string memory propKey,\n        bytes32 propValue,\n        string memory attrKey,\n        bytes32 attrValue\n    ) external requirePermission(CONTROLLER) {\n        _setAttribute(propKey, propValue, attrKey, attrValue);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal view override {\n        require(to != address(0) || !_restrictBurnPolicy, BURN_POLICY_ERROR);\n\n        if (from != address(0) && to != address(0)) {\n            bytes32 propValue = _getPropertyValue(uint32(tokenId), PROPERTY_TIER);\n            uint256 isTransferable = uint256(_getAttribute(PROPERTY_TIER, propValue, ATTRIBUTE_IS_TRANSFERABLE));\n            uint256 unlockTransferTimestamp = uint256(\n                _getAttribute(PROPERTY_TIER, propValue, ATTRIBUTE_UNLOCKS_AT_HOURS)\n            );\n            require(isTransferable == 1 && block.timestamp / 1 hours > unlockTransferTimestamp);\n        }\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    function _setAttribute(\n        string memory propKey,\n        bytes32 propValue,\n        string memory attrKey,\n        bytes32 attrValue\n    ) internal {\n        _attributesByPropertyKey[_calculateKeyHash(propKey)][propValue].attributes[\n            _calculateKeyHash(attrKey)\n        ] = attrValue;\n\n        emit SetAttribute(propKey, propValue, attrKey, attrValue);\n    }\n\n    function _getAttribute(\n        string memory propKey,\n        bytes32 propValue,\n        string memory attrKey\n    ) internal view returns (bytes32) {\n        return _attributesByPropertyKey[_calculateKeyHash(propKey)][propValue].attributes[_calculateKeyHash(attrKey)];\n    }\n\n    function _getPropertyValue(uint32 tokenId, string memory key) internal view returns (bytes32) {\n        return _propertiesByTokenId[tokenId].properties[_calculateKeyHash(key)];\n    }\n\n    function _calculateKeyHash(string memory key) private pure returns (KeyHash) {\n        return KeyHash.wrap(keccak256(abi.encodePacked(key)));\n    }\n\n    function setName(string calldata name_) external requirePermission(CONTROLLER) {\n        _editableName = name_;\n    }\n\n    function setSymbol(string calldata symbol_) external requirePermission(CONTROLLER) {\n        _editableSymbol = symbol_;\n    }\n\n    function name() public view override returns (string memory) {\n        return _editableName;\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _editableSymbol;\n    }\n}\n"
    },
    "contracts/apps/ERC721Sale/ERC721WhitelistSale.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport \"../../libraries/Exceptions.sol\";\nimport \"../ERC721Properties/ERC721Properties.sol\";\nimport \"./ERC721BaseSale.sol\";\nimport {__with_semver} from \"../../libraries/Semver.sol\";\n\ncontract ERC721WhitelistSale is ERC721BaseSale, __with_semver(uint8(1), uint8(0), uint8(0)) {\n    bytes public merkleProofIpfsHash; //TODO: mv to string -> merkleURI\n    bytes32 private _merkleRoot;\n\n    constructor(address trustedForwarder) ERC721BaseSale(trustedForwarder) {}\n\n    function initialize(IKernel _kernel, uint64 claimLimit_) external initializer {\n        __App_init(_kernel);\n        claimLimit = claimLimit_;\n    }\n\n    function setMerkleTree(bytes32 merkleRoot, bytes calldata merkleProofIpfsHash_)\n        external\n        requirePermission(CONTROLLER)\n    {\n        _setMerkleTree(merkleRoot, merkleProofIpfsHash_);\n    }\n\n    function buy(bytes32[] calldata proof, bytes32 tierValue) external payable {\n        require(_merkleRoot != bytes32(0), Exceptions.INVALID_INITIALIZATION_ERROR);\n\n        uint256 cost = tierPrices[tierValue];\n        require(cost != 0 && msg.value >= cost, Exceptions.VALIDATION_ERROR);\n\n        require(isActive, Exceptions.UNAVAILABLE_ERROR);\n\n        bool anyTier = MerkleProof.verify(proof, _merkleRoot, keccak256(abi.encodePacked(_msgSender())));\n        if (!anyTier) {\n            require(\n                MerkleProof.verify(proof, _merkleRoot, keccak256(abi.encodePacked(_msgSender(), tierValue))),\n                Exceptions.VALIDATION_ERROR\n            );\n        }\n\n        _claim();\n        _transferToTreasury();\n        address appAddress = kernel.getAppAddress(AppsIds.ERC721);\n        ERC721Properties(appAddress).mint(_msgSender(), tierValue);\n\n        _afterBuy(_msgSender(), appAddress, tierValue, cost, \"Whitelist\", __semver());\n    }\n\n    function _setMerkleTree(bytes32 merkleRoot, bytes calldata merkleProofIpfsHash_) internal {\n        _merkleRoot = merkleRoot;\n        merkleProofIpfsHash = merkleProofIpfsHash_;\n    }\n}\n"
    },
    "contracts/apps/ERC721Sale/ERC721OpenSale.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"../ERC721Properties/ERC721Properties.sol\";\nimport \"../../libraries/Exceptions.sol\";\nimport \"./ERC721BaseSale.sol\";\nimport {__with_semver} from \"../../libraries/Semver.sol\";\n\ncontract ERC721OpenSale is ERC721BaseSale, __with_semver(uint8(1), uint8(0), uint8(0)) {\n    function initialize(IKernel _kernel, uint64 claimLimit_) external initializer {\n        __App_init(_kernel);\n        claimLimit = claimLimit_;\n    }\n\n    constructor(address trustedForwarder) ERC721BaseSale(trustedForwarder) {}\n\n    function buy(address to, bytes32 tierValue) external payable {\n        require(isActive, Exceptions.UNAVAILABLE_ERROR);\n\n        uint256 cost = tierPrices[tierValue];\n        require(cost != 0 && msg.value >= cost, Exceptions.VALIDATION_ERROR);\n\n        _claim();\n        _transferToTreasury();\n        address appAddress = kernel.getAppAddress(AppsIds.ERC721);\n        ERC721Properties(appAddress).mint(to, tierValue);\n\n        _afterBuy(to, appAddress, tierValue, cost, \"SALE\", __semver());\n    }\n}\n"
    },
    "contracts/libraries/Semver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nabstract contract __with_semver {\n    uint8 private immutable __semver_major;\n    uint8 private immutable __semver_minor;\n    uint8 private immutable __semver_patch;\n\n    constructor(\n        uint8 _major,\n        uint8 _minor,\n        uint8 _patch\n    ) {\n        __semver_major = _major;\n        __semver_minor = _minor;\n        __semver_patch = _patch;\n    }\n\n    function __semver() public view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"v\",\n                    uint8(0x30) + __semver_major,\n                    \".\",\n                    uint8(0x30) + __semver_minor,\n                    \".\",\n                    uint8(0x30) + __semver_patch\n                )\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.9;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "contracts/kernel/interfaces/IKernel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"./IACL.sol\";\nimport \"./IAppManager.sol\";\n\ninterface IKernel is IACL, IAppManager {\n    function getUpdateManager() external view returns (address);\n\n    function upgradeApp(bytes32 id) external;\n}\n"
    },
    "contracts/apps/UpgradeableApp.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\ncontract UpgradeableApp {\n    bytes32 private constant _IMPLEMENTATION_SLOT =\n        bytes32(uint256(keccak256(\"co.superdao.app.proxy.implementation\")) - 1);\n\n    uint256[100] private __gap;\n\n    function _getImplementationSlot() internal pure returns (StorageSlot.AddressSlot storage) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/kernel/interfaces/IACL.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\ninterface IACL {\n    function addPermission(\n        bytes32 entity,\n        bytes32 app,\n        uint8 permission\n    ) external;\n\n    function removePermission(\n        bytes32 entity,\n        bytes32 app,\n        uint8 permission\n    ) external;\n\n    function getPermissions(bytes32 entity, bytes32 app) external view returns (bytes2);\n\n    function hasPermission(\n        address entityAddress,\n        address appAddress,\n        uint8 permissionId\n    ) external view returns (bool);\n}\n"
    },
    "contracts/kernel/interfaces/IAppManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\ninterface IAppManager {\n    function deployApp(\n        bytes32 id,\n        address appCode,\n        bytes memory data\n    ) external returns (address);\n\n    function connectApp(\n        bytes32 id,\n        address appAddress,\n        bool isNative\n    ) external;\n\n    function resetApp(\n        bytes32 id,\n        address appAddress,\n        bool isNative\n    ) external;\n\n    function getAppAddress(bytes32 id) external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/libraries/Pseudorand.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary Pseudorand {\n    function pseudorand(bytes calldata extra) external view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, extra)));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/apps/ERC721Sale/ERC721BaseSale.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"../App.sol\";\nimport \"../ERC721Properties/ERC721Properties.sol\";\nimport \"../../libraries/Exceptions.sol\";\nimport \"../../libraries/AppsIds.sol\";\n\ncontract ERC721BaseSale is App {\n    uint8 public immutable CONTROLLER = _initNextRole();\n\n    mapping(bytes32 => uint256) public tierPrices;\n\n    bool public isActive;\n    uint64 public claimLimit;\n\n    mapping(address => uint256) public claims;\n\n    uint256[97] private __gap;\n\n    event OnBuy(address buyer, address appAddress, bytes32 tierValue, uint256 cost, string saleType, string semver);\n\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function setPaymentPolicy(bytes32[] calldata tierValues, uint256[] calldata tierPrices_)\n        external\n        requirePermission(CONTROLLER)\n    {\n        require(tierValues.length == tierPrices_.length, Exceptions.VALIDATION_ERROR);\n\n        for (uint256 i; i != tierValues.length; ++i) {\n            tierPrices[tierValues[i]] = tierPrices_[i];\n        }\n    }\n\n    function setClaimLimit(uint64 claimLimit_) external requirePermission(CONTROLLER) {\n        claimLimit = claimLimit_;\n    }\n\n    function _claim() internal {\n        if (claimLimit != 0) {\n            require(claims[_msgSender()] > claimLimit, \"Invalid amount of NFTs for this address\");\n        }\n        claims[_msgSender()]++;\n    }\n\n    function _transferToTreasury() internal {\n        address wallet = kernel.getAppAddress(AppsIds.TREASURY);\n        require(wallet != address(0x00), \"Treasury address not set\");\n        payable(wallet).transfer(msg.value);\n    }\n\n    function setActive(bool isActive_) external requirePermission(CONTROLLER) {\n        isActive = isActive_;\n    }\n\n    function _afterBuy(\n        address buyer,\n        address appAddress,\n        bytes32 tierValue,\n        uint256 cost,\n        string memory saleType,\n        string memory semver\n    ) internal {\n        emit OnBuy(buyer, appAddress, tierValue, cost, saleType, semver);\n    }\n}\n"
    },
    "contracts/libraries/AppsIds.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nlibrary AppsIds {\n    bytes32 constant KERNEL = keccak256(abi.encodePacked(\"KERNEL\"));\n    bytes32 constant SUDO = keccak256(abi.encodePacked(\"SUDO\"));\n    bytes32 constant ERC721 = keccak256(abi.encodePacked(\"ERC721\"));\n    bytes32 constant ADMIN_CONTROLLER = keccak256(abi.encodePacked(\"ADMIN\")); //TODO: renamde admin to ADMIN_CONTROLLER\n    bytes32 constant ERC721_OPEN_SALE = keccak256(abi.encodePacked(\"ERC721_OPEN_SALE\"));\n    bytes32 constant ERC721_WHITELIST_SALE = keccak256(abi.encodePacked(\"ERC721_WHITELIST_SALE\"));\n    bytes32 constant TREASURY = keccak256(\"WALLET\"); //TODO: rename wallet to TREASURY\n    bytes32 constant RELEASE_MANAGER = keccak256(abi.encodePacked(\"RELEASE_MANAGER\"));\n}\n"
    },
    "contracts/templates/Models.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"../kernel/Kernel.sol\";\nimport \"../apps/AdminController/AdminController.sol\";\nimport \"../apps/ERC721Properties/ERC721Properties.sol\";\nimport \"../apps/ERC721Sale/ERC721OpenSale.sol\";\nimport \"../apps/ERC721Sale/ERC721WhitelistSale.sol\";\nimport \"../apps/ERC721Properties/ERC721Properties.sol\";\n\nlibrary Models {\n    enum AdditionalModules {\n        OpenSale,\n        WhitelistSale\n    }\n\n    struct DeploymentSettings {\n        AdminSettings adminSettings;\n        NFTSettings nftSettings;\n        SaleSettings openSaleSettings;\n        SaleSettings whiteListSaleSettings;\n    }\n\n    struct AdminSettings {\n        address[] admins;\n        address releaseManager;\n    }\n\n    struct NFTSettings {\n        address openseaOwner;\n        string url;\n        string name;\n        string symbol;\n        Attribute[] attributes;\n    }\n\n    struct Attribute {\n        bytes32 tierId;\n        string attrName;\n        bytes32 value;\n    }\n\n    struct SaleSettings {\n        bytes32[] tiersValues;\n        uint256[] tiersPrices;\n        uint64 claimLimit;\n    }\n}\n"
    },
    "contracts/kernel/Kernel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"./ACL.sol\";\nimport \"./AppManager.sol\";\nimport \"../updateManager/IUpdateManager.sol\";\nimport \"../libraries/AppsIds.sol\";\nimport \"../libraries/Exceptions.sol\";\nimport \"../libraries/Semver.sol\";\nimport \"./interfaces/IKernel.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract Kernel is Initializable, AppManager, IKernel, __with_semver(uint8(1), uint8(0), uint8(3)) {\n    IUpdateManager internal _updateManager;\n\n    constructor(address trustedForwarder) AppManager(trustedForwarder) {}\n\n    function initialize(\n        IUpdateManager updateManager,\n        address sudo,\n        address releaseManager\n    ) external initializer {\n        __BaseStorage_init();\n        _setApp(AppsIds.KERNEL, address(this), true);\n        _setApp(AppsIds.SUDO, sudo, false);\n        _setApp(AppsIds.RELEASE_MANAGER, releaseManager, false);\n        _addPermission(AppsIds.SUDO, AppsIds.KERNEL, KERNEL_ADMIN);\n        _addPermission(AppsIds.RELEASE_MANAGER, AppsIds.KERNEL, KERNEL_ADMIN);\n        _updateManager = updateManager;\n    }\n\n    function getUpdateManager() external view returns (address) {\n        return address(_updateManager);\n    }\n\n    function upgradeAppImpl(bytes32 id, address appImpl) external requirePermission(KERNEL_ADMIN) {\n        require(_appInfo[id].isNative && _appInfo[id].addr != address(0x00), Exceptions.INVARIANT_ERROR);\n\n        App app = App(_appInfo[id].addr);\n        app.upgrade(appImpl);\n    }\n\n    function upgradeApp(bytes32 id) external requirePermission(KERNEL_ADMIN) {\n        require(_appInfo[id].isNative && _appInfo[id].addr != address(0x00), Exceptions.INVARIANT_ERROR);\n\n        App app = App(_appInfo[id].addr);\n\n        address newCode = _updateManager.getLastAppCode(id);\n\n        require(app.implementation() != newCode, Exceptions.INVARIANT_ERROR);\n\n        app.upgrade(newCode);\n    }\n\n    /**\n     * Add support ERC-165 interface checks.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AppManager) returns (bool) {\n        return interfaceId == type(IKernel).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/kernel/ACL.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"./interfaces/IACL.sol\";\nimport \"../libraries/Permission.sol\";\nimport \"../libraries/Exceptions.sol\";\nimport \"./BaseStorage.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\ncontract ACL is BaseStorage, IACL {\n    uint8 constant ACL_SLOT_SIZE = 16;\n    uint8 public immutable KERNEL_ADMIN = _initNextRole();\n\n    uint256[100] private __gap;\n\n    constructor(address trustedForwarder) BaseStorage(trustedForwarder) {}\n\n    function addPermission(\n        bytes32 requesterAppId,\n        bytes32 appId,\n        uint8 permissionId\n    ) external requirePermission(KERNEL_ADMIN) {\n        _addPermission(requesterAppId, appId, permissionId);\n    }\n\n    function removePermission(\n        bytes32 requesterAppId,\n        bytes32 appId,\n        uint8 permissionId\n    ) external requirePermission(KERNEL_ADMIN) {\n        _removePermission(requesterAppId, appId, permissionId);\n    }\n\n    function getPermissions(bytes32 entity, bytes32 app) external view returns (bytes2) {\n        (uint16 row, uint256 column) = _calculateIndex(_appInfo[entity].index);\n\n        return _appInfo[app].slots[row][column];\n    }\n\n    function hasPermission(\n        address entityAddress,\n        address appAddress,\n        uint8 permissionId\n    ) external view returns (bool) {\n        bytes2 permissions = Permission._getCode(permissionId);\n\n        bytes32 entityId = _appIdByAddress[entityAddress];\n        bytes32 appId = _appIdByAddress[appAddress];\n\n        require(_appInfo[entityId].addr == entityAddress, Exceptions.INVARIANT_ERROR);\n        require(_appInfo[appId].addr == appAddress, Exceptions.INVARIANT_ERROR);\n\n        (uint16 row, uint256 column) = _calculateIndex(_appInfo[entityId].index);\n\n        return (_appInfo[appId].slots[row][column] & permissions) == permissions;\n    }\n\n    function _addPermission(\n        bytes32 requesterAppId,\n        bytes32 appId,\n        uint8 permissionId\n    ) internal {\n        (uint16 row, uint256 column) = _calculateIndex(_appInfo[requesterAppId].index);\n\n        _appInfo[appId].slots[row][column] |= Permission._getCode(permissionId);\n    }\n\n    function _removePermission(\n        bytes32 requesterAppId,\n        bytes32 appId,\n        uint8 permissionId\n    ) internal {\n        (uint16 row, uint256 column) = _calculateIndex(_appInfo[requesterAppId].index);\n\n        _appInfo[appId].slots[row][column] ^= Permission._getCode(permissionId);\n    }\n\n    function _calculateIndex(uint16 index) private pure returns (uint16, uint256) {\n        uint16 row = index / ACL_SLOT_SIZE;\n        uint256 column = index % ACL_SLOT_SIZE;\n\n        return (row, column);\n    }\n\n    /**\n     * Add support ERC-165 interface checks.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IACL).interfaceId || interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n}\n"
    },
    "contracts/kernel/AppManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"./ACL.sol\";\nimport \"./BaseStorage.sol\";\nimport \"./interfaces/IAppManager.sol\";\nimport \"../apps/AppProxy.sol\";\n\ncontract AppManager is ACL, IAppManager {\n    string constant APP_WAS_INITED_ERROR = \"APP_WAS_INITED\";\n\n    uint8 constant SLOT_SIZE = 16;\n\n    uint256[100] private __gap;\n\n    constructor(address trustedForwarder) ACL(trustedForwarder) {}\n\n    function deployApp(\n        bytes32 id,\n        address appCode,\n        bytes calldata data\n    ) external requirePermission(KERNEL_ADMIN) returns (address) {\n        address appProxy = address(new AppProxy(appCode));\n        _setApp(id, appProxy, true);\n\n        (bool success, ) = appProxy.call(data);\n        require(success, Exceptions.INVALID_INITIALIZATION_ERROR);\n\n        return appProxy;\n    }\n\n    function connectApp(\n        bytes32 id,\n        address appAddress,\n        bool isNative\n    ) external requirePermission(KERNEL_ADMIN) {\n        _setApp(id, appAddress, isNative);\n    }\n\n    function resetApp(\n        bytes32 id,\n        address appAddress,\n        bool isNative\n    ) external requirePermission(KERNEL_ADMIN) {\n        _resetApp(id, appAddress, isNative);\n    }\n\n    function getAppAddress(bytes32 id) external view returns (address) {\n        return _appInfo[id].addr;\n    }\n\n    function _resetApp(\n        bytes32 id,\n        address app,\n        bool isNative\n    ) internal {\n        bytes32 existedApp = _appIdByAddress[app];\n        if (existedApp != id) {\n            require(existedApp == bytes32(0), Exceptions.ILLEGAL_ADDRESS);\n        }\n        delete _appIdByAddress[_appInfo[id].addr];\n\n        _appInfo[id].addr = app;\n        _appInfo[id].isActive = true;\n        _appInfo[id].isNative = isNative;\n\n        _appIdByAddress[app] = id;\n    }\n\n    function _setApp(\n        bytes32 id,\n        address app,\n        bool isNative\n    ) internal {\n        require(\n            _appInfo[id].addr == address(0x00) && _appIdByAddress[app] == bytes32(0),\n            Exceptions.APP_WAS_INITED_ERROR\n        );\n\n        _appInfo[id].addr = app;\n        _appInfo[id].index = _nextIndex;\n        _appInfo[id].isActive = true;\n        _appInfo[id].isNative = isNative;\n\n        _appIdByAddress[app] = id;\n        _nextIndex++;\n    }\n\n    /**\n     * Add support ERC-165 interface checks.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ACL) returns (bool) {\n        return interfaceId == type(IAppManager).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/updateManager/IUpdateManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\ninterface IUpdateManager {\n    function upgrade(address appCode) external;\n\n    function setAppCode(bytes32 app, address code) external;\n\n    function getLastAppCode(bytes32 app) external view returns (address);\n\n    function getAppCodeHistory(bytes32 app) external view returns (address[] memory);\n}\n"
    },
    "contracts/libraries/Permission.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nlibrary Permission {\n    string constant INVALID_PERMISSION_ID_ERROR = \"INVALID_PERMISSION_ID\";\n\n    function _getCode(uint8 id) internal pure returns (bytes2) {\n        require(id < 16, INVALID_PERMISSION_ID_ERROR);\n        return bytes2(uint16(1 << id));\n    }\n}\n"
    },
    "contracts/kernel/BaseStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"../libraries/Gap50.sol\";\nimport \"../apps/App.sol\";\nimport \"./interfaces/IKernel.sol\";\n\ncontract BaseStorage is Gap50, App {\n    struct AppInfo {\n        address addr;\n        uint16 index;\n        bool isActive;\n        bool isNative;\n        mapping(uint16 => bytes2[16]) slots;\n    }\n\n    uint16 internal _nextIndex;\n    mapping(address => bytes32) internal _appIdByAddress;\n    mapping(bytes32 => AppInfo) internal _appInfo;\n\n    uint256[97] private __gap;\n\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function __BaseStorage_init() internal onlyInitializing {\n        __App_init(IKernel(address(this)));\n    }\n}\n"
    },
    "contracts/libraries/Gap50.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract Gap50 is Initializable {\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/apps/AppProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"./UpgradeableApp.sol\";\n\ncontract AppProxy is Proxy, UpgradeableApp {\n    uint256[100] private __gap;\n\n    constructor(address implementation_) {\n        _getImplementationSlot().value = implementation_;\n    }\n\n    function _implementation() internal view override returns (address) {\n        return _getImplementationSlot().value;\n    }\n}\n"
    },
    "contracts/templates/IDAOConstructor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"./Models.sol\";\n\ninterface IDAOConstructor {\n    function deploy(\n        Models.AdditionalModules[] calldata,\n        Models.DeploymentSettings calldata,\n        address treasury\n    ) external;\n}\n"
    },
    "contracts/templates/DAOConstructor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../apps/AppProxy.sol\";\nimport \"../kernel/Kernel.sol\";\nimport \"../apps/AdminController/AdminController.sol\";\nimport \"../apps/ERC721Sale/ERC721OpenSale.sol\";\nimport \"../apps/ERC721Sale/ERC721WhitelistSale.sol\";\nimport \"../apps/ERC721Properties/ERC721Properties.sol\";\nimport \"./Models.sol\";\nimport \"../libraries/Semver.sol\";\nimport \"./IDAOConstructor.sol\";\n\ncontract DAOConstructor is\n    UpgradeableApp,\n    Initializable,\n    OwnableUpgradeable,\n    IDAOConstructor,\n    __with_semver(uint8(1), uint8(1), uint8(0))\n{\n    IUpdateManager public updateManager;\n\n    event Deployed(Kernel kernel, Models.AdditionalModules[] modules, Models.DeploymentSettings deploymentSettings);\n\n    function initialize(IUpdateManager updateManagerProxy_) external initializer {\n        __Ownable_init();\n        updateManager = updateManagerProxy_;\n    }\n\n    function upgrade(address appCode) external onlyOwner {\n        _getImplementationSlot().value = appCode;\n    }\n\n    function deploy(\n        Models.AdditionalModules[] calldata modules,\n        Models.DeploymentSettings calldata deploymentSettings,\n        address treasury\n    ) external {\n        Kernel kernel = Kernel(address(new AppProxy(updateManager.getLastAppCode(AppsIds.KERNEL))));\n        kernel.initialize(updateManager, address(this), deploymentSettings.adminSettings.releaseManager);\n\n        _deployAdmin(kernel, deploymentSettings.adminSettings);\n        ERC721Properties erc721 = _deployERC721(kernel, deploymentSettings.nftSettings);\n\n        for (uint256 i = 0; i < modules.length; i++) {\n            Models.AdditionalModules module = modules[i];\n            if (module == Models.AdditionalModules.OpenSale) {\n                _deployOpenSale(kernel, erc721, deploymentSettings.openSaleSettings);\n            } else if (module == Models.AdditionalModules.WhitelistSale) {\n                _deployWhiteListSale(kernel, erc721, deploymentSettings.whiteListSaleSettings);\n            }\n        }\n\n        if (treasury != address(0x00)) {\n            kernel.connectApp(AppsIds.TREASURY, treasury, false);\n        }\n        Kernel(kernel).resetApp(AppsIds.SUDO, owner(), false);\n        emit Deployed(kernel, modules, deploymentSettings);\n    }\n\n    function _deployAdmin(Kernel kernel, Models.AdminSettings calldata adminSetting)\n        internal\n        returns (AdminController)\n    {\n        address adminCode = updateManager.getLastAppCode(AppsIds.ADMIN_CONTROLLER);\n        AdminController admin = AdminController(\n            kernel.deployApp(\n                AppsIds.ADMIN_CONTROLLER,\n                adminCode,\n                abi.encodeCall(AdminController(adminCode).initialize, (kernel, adminSetting.admins))\n            )\n        );\n\n        kernel.addPermission(AppsIds.SUDO, AppsIds.ADMIN_CONTROLLER, AdminController(admin).SUDO());\n        kernel.addPermission(AppsIds.RELEASE_MANAGER, AppsIds.ADMIN_CONTROLLER, AdminController(admin).SUDO());\n\n        return admin;\n    }\n\n    function _deployERC721(Kernel kernel, Models.NFTSettings calldata nftSettings) internal returns (ERC721Properties) {\n        address erc721Code = updateManager.getLastAppCode(AppsIds.ERC721);\n        ERC721Properties erc721 = ERC721Properties(\n            kernel.deployApp(\n                AppsIds.ERC721,\n                erc721Code,\n                abi.encodeCall(\n                    ERC721Properties(erc721Code).initialize,\n                    ERC721Properties.Initialization({\n                        kernel: kernel,\n                        openseaOwner: nftSettings.openseaOwner,\n                        baseURI: nftSettings.url,\n                        name: nftSettings.name,\n                        symbol: nftSettings.symbol\n                    })\n                )\n            )\n        );\n\n        kernel.addPermission(AppsIds.SUDO, AppsIds.ERC721, ERC721Properties(erc721).CONTROLLER());\n        kernel.addPermission(AppsIds.ADMIN_CONTROLLER, AppsIds.ERC721, ERC721Properties(erc721).CONTROLLER());\n        kernel.addPermission(AppsIds.RELEASE_MANAGER, AppsIds.ERC721, ERC721Properties(erc721).CONTROLLER());\n\n        for (uint256 i = 0; i < nftSettings.attributes.length; i++) {\n            Models.Attribute memory attribute = nftSettings.attributes[i];\n            erc721.setAttribute(\"TIER\", attribute.tierId, attribute.attrName, attribute.value);\n        }\n\n        return erc721;\n    }\n\n    function _deployOpenSale(\n        Kernel kernel,\n        ERC721Properties erc721,\n        Models.SaleSettings calldata openSaleSettings\n    ) internal returns (ERC721OpenSale) {\n        address erc721OpenSaleCode = updateManager.getLastAppCode(AppsIds.ERC721_OPEN_SALE);\n        ERC721OpenSale erc721OpenSale = ERC721OpenSale(\n            kernel.deployApp(\n                AppsIds.ERC721_OPEN_SALE,\n                erc721OpenSaleCode,\n                abi.encodeCall(ERC721OpenSale(erc721OpenSaleCode).initialize, (kernel, 0))\n            )\n        );\n\n        kernel.addPermission(AppsIds.SUDO, AppsIds.ERC721_OPEN_SALE, ERC721OpenSale(erc721OpenSale).CONTROLLER());\n        kernel.addPermission(\n            AppsIds.ADMIN_CONTROLLER,\n            AppsIds.ERC721_OPEN_SALE,\n            ERC721OpenSale(erc721OpenSale).CONTROLLER()\n        );\n        kernel.addPermission(\n            AppsIds.RELEASE_MANAGER,\n            AppsIds.ERC721_OPEN_SALE,\n            ERC721OpenSale(erc721OpenSale).CONTROLLER()\n        );\n        kernel.addPermission(AppsIds.ERC721_OPEN_SALE, AppsIds.ERC721, ERC721Properties(erc721).CONTROLLER());\n\n        erc721OpenSale.setPaymentPolicy(openSaleSettings.tiersValues, openSaleSettings.tiersPrices);\n        erc721OpenSale.setActive(true);\n\n        if (openSaleSettings.claimLimit > uint64(0)) {\n            erc721OpenSale.setClaimLimit(openSaleSettings.claimLimit);\n        }\n\n        return erc721OpenSale;\n    }\n\n    function _deployWhiteListSale(\n        Kernel kernel,\n        ERC721Properties erc721,\n        Models.SaleSettings calldata whiteListSale\n    ) internal returns (ERC721WhitelistSale) {\n        address erc721WhitelistSaleCode = updateManager.getLastAppCode(AppsIds.ERC721_WHITELIST_SALE);\n        ERC721WhitelistSale erc721WhitelistSale = ERC721WhitelistSale(\n            kernel.deployApp(\n                AppsIds.ERC721_WHITELIST_SALE,\n                erc721WhitelistSaleCode,\n                abi.encodeCall(ERC721WhitelistSale.initialize, (kernel, 0))\n            )\n        );\n\n        kernel.addPermission(\n            AppsIds.SUDO,\n            AppsIds.ERC721_WHITELIST_SALE,\n            ERC721WhitelistSale(erc721WhitelistSale).CONTROLLER()\n        );\n        kernel.addPermission(\n            AppsIds.ADMIN_CONTROLLER,\n            AppsIds.ERC721_WHITELIST_SALE,\n            ERC721WhitelistSale(erc721WhitelistSale).CONTROLLER()\n        );\n        kernel.addPermission(\n            AppsIds.RELEASE_MANAGER,\n            AppsIds.ERC721_WHITELIST_SALE,\n            ERC721WhitelistSale(erc721WhitelistSale).CONTROLLER()\n        );\n        kernel.addPermission(AppsIds.ERC721_WHITELIST_SALE, AppsIds.ERC721, ERC721Properties(erc721).CONTROLLER());\n\n        erc721WhitelistSale.setPaymentPolicy(whiteListSale.tiersValues, whiteListSale.tiersPrices);\n        erc721WhitelistSale.setActive(true);\n\n        if (whiteListSale.claimLimit > uint64(0)) {\n            erc721WhitelistSale.setClaimLimit(whiteListSale.claimLimit);\n        }\n\n        return erc721WhitelistSale;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/updateManager/UpdateManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"./IUpdateManager.sol\";\nimport \"../apps/UpgradeableApp.sol\";\nimport \"../libraries/Exceptions.sol\";\nimport \"../libraries/AppsIds.sol\";\nimport \"../libraries/Semver.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract UpdateManager is\n    UpgradeableApp,\n    Initializable,\n    OwnableUpgradeable,\n    IUpdateManager,\n    __with_semver(uint8(1), uint8(0), uint8(0))\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _appsCode;\n\n    uint256[99] private __gap;\n\n    event SetAppCode(bytes32 app, address admin);\n\n    function initialize(\n        address kernel,\n        address admin,\n        address erc721,\n        address erc721OpenSale,\n        address erc721WhitelistSale\n    ) external initializer {\n        __Ownable_init();\n\n        _setAppCode(AppsIds.KERNEL, kernel);\n        _setAppCode(AppsIds.ADMIN_CONTROLLER, admin);\n        _setAppCode(AppsIds.ERC721, erc721);\n        _setAppCode(AppsIds.ERC721_OPEN_SALE, erc721OpenSale);\n        _setAppCode(AppsIds.ERC721_WHITELIST_SALE, erc721WhitelistSale);\n    }\n\n    function upgrade(address appCode) external onlyOwner {\n        _getImplementationSlot().value = appCode;\n    }\n\n    function setAppCode(bytes32 app, address code) external onlyOwner {\n        _setAppCode(app, code);\n    }\n\n    function getLastAppCode(bytes32 app) external view returns (address) {\n        return _appsCode[app].at(_appsCode[app].length() - 1);\n    }\n\n    function getAppCodeHistory(bytes32 app) external view returns (address[] memory) {\n        return _appsCode[app].values();\n    }\n\n    function _setAppCode(bytes32 app, address code) internal {\n        require(_appsCode[app].add(code), Exceptions.INVARIANT_ERROR);\n\n        emit SetAppCode(app, code);\n    }\n}\n"
    },
    "contracts/mock/MockApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"../apps/App.sol\";\nimport \"../kernel/Kernel.sol\";\n\ncontract MockApp is App {\n    uint8 immutable SUDO = _initNextRole();\n\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function initialize(IKernel kernel) external initializer {\n        __App_init(kernel);\n    }\n\n    function appCall(address to, bytes calldata data) external returns (bytes memory) {\n        (bool success, bytes memory result) = to.call(data);\n        require(success);\n        return result;\n    }\n\n    function testRequireSUDO() external requirePermission(SUDO) {}\n\n    function callTestRequireSUDO(MockApp app) external {\n        app.testRequireSUDO();\n    }\n}\n"
    },
    "contracts/mock/MockUpgradeableApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"../apps/UpgradeableApp.sol\";\n\ncontract MockUpgradeableApp is UpgradeableApp {\n    function getImplementationSlot() external pure returns (StorageSlot.AddressSlot memory) {\n        return _getImplementationSlot();\n    }\n}\n"
    },
    "contracts/apps/ERC721Claim/ERC721WhitelistClaim.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport \"../App.sol\";\nimport \"../ERC721Properties/ERC721Properties.sol\";\nimport \"../../libraries/Exceptions.sol\";\nimport \"../../libraries/AppsIds.sol\";\nimport {__with_semver} from \"../../libraries/Semver.sol\";\n\ncontract ERC721WhitelistClaim is App, __with_semver(uint8(1), uint8(0), uint8(1)) {\n    string public constant CLAIM_LIMIT_ERROR = \"CLAIM_LIMIT_ERROR\";\n    uint8 public immutable CONTROLLER = _initNextRole();\n\n    bool public isActive;\n\n    bytes public merkleTreeURI; // ipfs hash -> bytes32\n    bytes32 public merkleTreeRoot;\n\n    mapping(bytes32 => uint256) public claimLimitByTier;\n    mapping(address => mapping(bytes32 => uint256)) public claims;\n\n    uint256[95] private __gap;\n\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function initialize(\n        IKernel _kernel,\n        bytes32[] calldata tiers,\n        uint256[] calldata claimLimits\n    ) external initializer {\n        __App_init(_kernel);\n        for (uint256 i; i != tiers.length; ++i) {\n            claimLimitByTier[tiers[i]] = claimLimits[i];\n        }\n    }\n\n    function setActive(bool isActive_) external requirePermission(CONTROLLER) {\n        isActive = isActive_;\n    }\n\n    function setMerkleTree(bytes32 merkleTreeRoot_, bytes calldata merkleTreeURI_)\n        external\n        requirePermission(CONTROLLER)\n    {\n        _requireActive();\n        merkleTreeRoot = merkleTreeRoot_;\n        merkleTreeURI = merkleTreeURI_;\n    }\n\n    function claim(\n        address to,\n        bytes32[] calldata merkleProof,\n        bytes32 tierValue\n    ) external {\n        _requireActive();\n        require((++claims[to][tierValue]) <= claimLimitByTier[tierValue], CLAIM_LIMIT_ERROR);\n        bytes32 element = keccak256(abi.encodePacked(to, _bytes32ToString(tierValue)));\n        require(MerkleProof.verify(merkleProof, merkleTreeRoot, element), Exceptions.VALIDATION_ERROR);\n        ERC721Properties(kernel.getAppAddress(AppsIds.ERC721)).mint(to, tierValue);\n    }\n\n    function _requireActive() internal view {\n        require(isActive, Exceptions.NOT_ACTIVE_ERROR);\n    }\n\n    function _bytes32ToString(bytes32 tier) internal pure returns (string memory) {\n        uint8 ptr;\n        while (ptr < 32 && tier[ptr] != 0) {\n            ++ptr;\n        }\n        bytes memory tmp = new bytes(ptr);\n        for (uint8 i; i != ptr; ++i) {\n            tmp[i] = tier[i];\n        }\n        return string(tmp);\n    }\n}\n"
    },
    "contracts/CallForwarder/CallForwarder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./EIP712.sol\";\nimport \"../libraries/Exceptions.sol\";\nimport {__with_semver} from \"../libraries/Semver.sol\";\n\ncontract CallForwarder is EIP712, __with_semver(uint8(1), uint8(0), uint8(0)) {\n    using ECDSA for bytes32;\n\n    struct ForwardRequest {\n        address from; // Externally-owned account (EOA) making the request.\n        address to; // Destination address, normally a smart contract.\n        uint256 value; // Amount of ether to transfer to the destination.\n        uint256 nonce; // On-chain tracked nonce of a transaction.\n        bytes data; // (Call)data to be sent to the destination.\n    }\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\"ForwardRequest(address from,address to,uint256 value,uint256 nonce,bytes data)\");\n\n    mapping(address => uint256) private _nonces;\n\n    event MetaTransactionExecuted(address indexed from, address indexed to, bytes indexed data);\n\n    constructor(string memory name, string memory version) EIP712(name, version) {}\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `execute`, as defined by {EIP712}.\n     * See https://eips.ethereum.org/EIPS/eip-712\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /// @dev Retrieves the on-chain tracked nonce of an EOA making the request.\n    function getNonce(address from) public view returns (uint256) {\n        return _nonces[from];\n    }\n\n    function getSigner(ForwardRequest calldata req, bytes calldata signature) public view returns (address signer) {\n        signer = getMessageHash(req).recover(signature);\n    }\n\n    function getMessageHash(ForwardRequest calldata req) public view returns (bytes32) {\n        return\n            _hashTypedDataV4(\n                keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.nonce, keccak256(req.data)))\n            );\n    }\n\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\n        address signer = getSigner(req, signature);\n        return _nonces[req.from] == req.nonce && signer == req.from;\n    }\n\n    function executeSingle(ForwardRequest calldata req, bytes calldata signature)\n        public\n        payable\n        returns (bytes memory returnData)\n    {\n        require(verify(req, signature), \"AwlForwarder: signature does not match request\");\n        _nonces[req.from]++;\n        returnData = Address.functionCallWithValue(\n            req.to,\n            abi.encodePacked(req.data, req.from),\n            req.value,\n            Exceptions.INVALID_AUTHORIZATION_ERROR\n        );\n\n        emit MetaTransactionExecuted(req.from, req.to, req.data);\n    }\n\n    function executeSingle(ForwardRequest calldata req) public payable returns (bytes memory returnData) {\n        require(req.from == msg.sender, \"AwlForwarder: msg.sender must be equals with req.from\");\n        returnData = Address.functionCallWithValue(\n            req.to,\n            abi.encodePacked(req.data, req.from),\n            req.value,\n            Exceptions.INVALID_AUTHORIZATION_ERROR\n        );\n    }\n\n    function executeBatch(ForwardRequest[] calldata reqs, bytes[] calldata signatures)\n        public\n        payable\n        returns (bytes[] memory)\n    {\n        require(\n            reqs.length == signatures.length,\n            \"length of forward requests must be similar with length of signatures\"\n        );\n        bytes[] memory results = new bytes[](reqs.length);\n        for (uint256 i = 0; i < results.length; i++) {\n            results[i] = executeSingle(reqs[i], signatures[i]);\n        }\n        return results;\n    }\n\n    function executeBatch(ForwardRequest[] calldata reqs) public payable returns (bytes[] memory) {\n        bytes[] memory results = new bytes[](reqs.length);\n        for (uint256 i = 0; i < results.length; i++) {\n            results[i] = executeSingle(reqs[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/CallForwarder/EIP712.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract EIP712 {\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    function getChainId() public view returns (uint256) {\n        return _CACHED_CHAIN_ID;\n    }\n\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, _CACHED_CHAIN_ID, address(this)));\n    }\n\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_CACHED_DOMAIN_SEPARATOR, structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        _mint(_msgSender(), 1e24);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}